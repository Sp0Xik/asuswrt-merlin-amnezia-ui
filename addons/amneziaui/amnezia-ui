#!/bin/sh
# Amnezia-UI for ASUSWRT-Merlin
# AmneziaWG (WireGuard with DPI bypass) addon
# Provides command-line and web interface management with router ASP integration
VERSION="3.6.1"
BASE_DIR="/jffs/addons/amneziaui"
CONFIG_DIR="$BASE_DIR/configs"
WEB_DIR="$BASE_DIR/web"
CUSTOM_DIR="/jffs/amneziaui_custom"
PID_FILE="/tmp/amneziaui.pid"
LOG_FILE="/tmp/amneziaui.log"
WEB_PID="/tmp/amneziaui_web.pid"
WEB_PORT="8080"
ASP_DIR="$WEB_DIR/asp"
ASP_INDEX="$ASP_DIR/index.asp"
OVERLAY_DIR="/jffs/overlay/www"
STOCK_WWW="/www"
VPN_ASP="Advanced_VPN_Content.asp"
FIREWALL_ASP="Advanced_Firewall_Content.asp"
VPN_TABS_ASP="VPN.asp"
MENU_TREE_JS="menuTree.js"
USER_ASP_NAME="user_amneziaui.asp"
USER_ASP_PATH="$STOCK_WWW/$USER_ASP_NAME"
USER2_ASP="User2.asp"
# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color
log() { echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"; }
print_status() {
    case $1 in
        error) echo -e "${RED}[ERROR]${NC} $2" ;;
        success) echo -e "${GREEN}[OK]${NC} $2" ;;
        warning) echo -e "${YELLOW}[WARNING]${NC} $2" ;;
        info|*) echo "[INFO] $2" ;;
    esac
    log "$1: $2"
}
check_merlin() {
    if [ -f /jffs/.asusrouter ]; then
        print_status success "ASUSWRT-Merlin compatibility confirmed (marker found)"; return 0; fi
    if uname -a 2>/dev/null | grep -iq merlin; then
        print_status info "Merlin detected, creating compatibility marker"
        touch /jffs/.asusrouter 2>/dev/null && { print_status success "Compatibility marker created successfully"; return 0; }
    fi
    print_status warning "ASUSWRT-Merlin firmware not detected"
    print_status info "Continuing anyway - to force, run: touch /jffs/.asusrouter"; return 0
}
ensure_dirs() {
    mkdir -p "$CONFIG_DIR" "$WEB_DIR" "$ASP_DIR" "$CUSTOM_DIR"
}
# ---------------- Mini-UI (userX.asp) creation & integration ----------------
user_asp_template() {
    cat << 'EOF'<% nvram("productid"); %><!DOCTYPE html>
<meta charset="utf-8"/><meta content="IE=edge" http-equiv="X-UA-Compatible"/><meta content="width=device-width, initial-scale=1" name="viewport"/>Amnezia-UI â€” mini UI  body{font-family:Arial,Helvetica,sans-serif;margin:0;background:#0b1220;color:#e6edf3}<br>  header{background:#161b22;padding:12px 16px;border-bottom:1px solid #30363d}<br>  h1{font-size:18px;margin:0}<br>  .wrap{padding:16px}<br>  .card{background:#0d1117;border:1px solid #30363d;border-radius:8px;padding:16px}<br>  .btn{display:inline-block;background:#238636;color:#fff;padding:10px 14px;border-radius:6px;text-decoration:none}<br>  .btn.secondary{background:#0969da}<br>  .row{display:flex;gap:12px;flex-wrap:wrap}<br>  iframe{width:100%;height:70vh;border:1px solid #30363d;border-radius:6px;background:#fff}<br>  .hint{color:#8b949e;font-size:12px;margin-top:8px}<div class="wrap">  <div class="card"><br/>
    <div class="row"><br/>
      <a class="btn" href="/user_amneziaui.asp?open=ui">Open embedded UI</a><br/>
      <a class="btn secondary" href="http://<% nvram(" lan_ipaddr="" target="_blank">:8080/"/>Open full UI (new tab)</a><br/>
    </div><br/>
    <p class="hint">Service must be running on port 8080. Start via amnezia-ui script if needed.</p><br/>
  </div><br/>
  <div class="card" id="embed" style="margin-top:14px;"><br/>
    <iframe lan_ipaddr="" src="http://<% nvram(" title="Amnezia-UI">:8080/"/>></iframe><br/>
  </div></div>EOF
}
create_user_asp() {
    local target="${USER_ASP_PATH}"
    mkdir -p "$STOCK_WWW" "$OVERLAY_DIR"
    # Prefer overlay to avoid touching stock directly
    if [ -d "$OVERLAY_DIR" ]; then
        target="$OVERLAY_DIR/$USER_ASP_NAME"
    fi
    if [ -f "$target" ]; then
        print_status info "Mini-UI ASP already exists: $target"; return 0; fi
    user_asp_template > "$target" && {
        chmod 644 "$target"
        print_status success "Mini-UI ASP created: $target"
    } || {
        print_status error "Failed to create $target"; return 1
    }
}
ensure_home_link() {
    # Inject link into index.asp via overlay when possible
    local idx_src="$STOCK_WWW/index.asp"
    local idx_ovl="$OVERLAY_DIR/index.asp"
    mkdir -p "$OVERLAY_DIR"
    if [ -f "$idx_src" ] && [ ! -f "$idx_ovl" ]; then cp -f "$idx_src" "$idx_ovl"; fi
    if [ -f "$idx_ovl" ]; then
        if ! grep -q "user_amneziaui.asp" "$idx_ovl" 2>/dev/null; then
            sed -i '/<\/body>/i \<!-- Amnezia-UI link injected -->\n<li style="list-style:none;margin:6px 0"><a href="/user_amneziaui.asp">Amnezia-UI</a></li>' "$idx_ovl" && \
            print_status success "Homepage link injected (overlay)"
        else
            print_status info "Homepage link already present"
        fi
    else
        print_status warning "index.asp overlay not available; skipping homepage link"
    fi
}
ensure_vpn_fw_links() {
    local files="${VPN_ASP} ${FIREWALL_ASP}"
    for f in $files; do
        local src="$STOCK_WWW/$f"
        local ovl="$OVERLAY_DIR/$f"
        [ -f "$src" ] || { print_status info "$f not found on this model"; continue; }
        [ -f "$ovl" ] || cp -f "$src" "$ovl"
        if ! grep -q "user_amneziaui.asp" "$ovl" 2>/dev/null; then
            sed -i '/<\/body>/i \<!-- Amnezia-UI quick entry -->\n<div style="margin:10px 0;">\n  <a href="/user_amneziaui.asp" style="color:#0969da">Open Amnezia-UI mini page</a>\n</div>' "$ovl" && \
            print_status success "Injected link into $f (overlay)"
        else
            print_status info "$f already has Amnezia link"
        fi
    done
}
# --------- VPN tab list integration (VPN.asp submenu injection, robust) ---------
ensure_vpn_tabs_entry() {
    local tabs_src="$STOCK_WWW/$VPN_TABS_ASP"
    local tabs_ovl="$OVERLAY_DIR/$VPN_TABS_ASP"
    mkdir -p "$OVERLAY_DIR"
    if [ ! -f "$tabs_src" ]; then
        print_status info "$VPN_TABS_ASP not found; skipping VPN tab injection"; return 0
    fi
    [ -f "$tabs_ovl" ] || cp -f "$tabs_src" "$tabs_ovl"
    if ! grep -q "user_amneziaui.asp" "$tabs_ovl" 2>/dev/null; then
        # Strategy A: Insert after WireGuard tab or existing VPN submenu links
        sed -i '/WireGuard\|OpenVPN\|VPNFusion\|VPN Client/ { n; a \\n<a href="/user_amneziaui.asp">Amnezia-UI<\/a><\/li>\n' "$tabs_ovl" 2>/dev/null || true
        # Strategy B: Append within the first  after submenu start
        if ! grep -q "Amnezia-UI" "$tabs_ovl"; then
            sed -i '0,/<\/ul>/ s//\n<li><a href="\/user_amneziaui.asp">Amnezia-UI<\/a><\/li>\n&/' "$tabs_ovl" 2>/dev/null || true
        fi
        # Strategy C: If markup is not UL/LI, inject a plain anchor near VPN section header
        if ! grep -q "Amnezia-UI" "$tabs_ovl"; then
            sed -i '0,/<\/h2>\|<\/h3>/ s//\n</a><a href="\/user_amneziaui.asp" style="margin-left:8px;color:#0969da">Amnezia-UI<\/a>\n&/' "$tabs_ovl" 2>/dev/null || true
        fi
        if grep -q "Amnezia-UI" "$tabs_ovl"; then
            print_status success "Injected Amnezia-UI entry into VPN tab list (overlay)"
        else
            print_status warning "Could not detect submenu markup; skipping VPN tab injection"
        fi
    else
        print_status info "VPN tab already contains Amnezia-UI entry"
    fi
}
# --------- NEW: menuTree.js overlay/patch (adds global left menu item) ---------
patch_menu_tree() {
    local js_src="$STOCK_WWW/$MENU_TREE_JS"
    local js_ovl="$OVERLAY_DIR/$MENU_TREE_JS"
    mkdir -p "$OVERLAY_DIR"
    if [ ! -f "$js_src" ]; then
        print_status info "$MENU_TREE_JS not found; skipping menuTree patch"; return 0
    fi
    [ -f "$js_ovl" ] || cp -f "$js_src" "$js_ovl"
    # Support both legacy array push and object-based menus
    if ! grep -q "Amnezia-UI" "$js_ovl" 2>/dev/null; then
        # Try common Asus menu arrays like menuTree["vpn"] or leftMenu
        sed -i 's/\(menuTree\[[^]]*\][[:space:]]*=\s*\[\)/\1\n  {"url":"\\/user_amneziaui.asp","text":"Amnezia-UI"},/;t; s/\(leftMenu\s*=\s*\[\)/\1\n  {"url":"\\/user_amneziaui.asp","text":"Amnezia-UI"},/;' "$js_ovl" 2>/dev/null || true
        # Fallback: append at end before closing array if found
        if ! grep -q "Amnezia-UI" "$js_ovl"; then
            sed -i '0,/\];/ s//,\n  {"url":"\\/user_amneziaui.asp","text":"Amnezia-UI"}\n];/' "$js_ovl" 2>/dev/null || true
        fi
        # As ultimate fallback, add simple push into leftMenu if exists
        if ! grep -q "Amnezia-UI" "$js_ovl"; then
            echo '\n// Amnezia-UI injection
try{(window.leftMenu||[]).push({url:"/user_amneziaui.asp",text:"Amnezia-UI"});}catch(e){}' >> "$js_ovl"
        fi
        if grep -q "Amnezia-UI" "$js_ovl"; then
            print_status success "menuTree.js patched (overlay)"
        else
            print_status warning "Unable to patch menuTree.js"
        fi
    else
        print_status info "menuTree.js already contains Amnezia-UI"
    fi
}
# --------- Fallback to User2.asp quick link (legacy firmwares) ---------
ensure_user2_fallback() {
    local u2_src="$STOCK_WWW/$USER2_ASP"
    local u2_ovl="$OVERLAY_DIR/$USER2_ASP"
    mkdir -p "$OVERLAY_DIR"
    [ -f "$u2_src" ] || { print_status info "$USER2_ASP not found; skipping User2 fallback"; return 0; }
    [ -f "$u2_ovl" ] || cp -f "$u2_src" "$u2_ovl"
    if ! grep -q "user_amneziaui.asp" "$u2_ovl" 2>/dev/null; then
        sed -i '/<\/body>/i \<!-- Amnezia-UI quick entry (User2.asp) -->\n<div style="margin:10px 0;">\n  <a href="/user_amneziaui.asp" style="color:#0969da">Amnezia-UI</a>\n</div>' "$u2_ovl" && \
        print_status success "Injected fallback link into $USER2_ASP (overlay)"
    else
        print_status info "$USER2_ASP already has Amnezia link"
    fi
}
# ---------------- Web server helpers ----------------
resolve_httpd_bin(){
    # Prefer Entware httpd if available; else busybox
    if command -v httpd >/dev/null 2>&1; then
        echo "$(command -v httpd)"; return 0;
    fi
    if command -v busybox >/dev/null 2>&1; then
        echo "busybox"; return 0;
    fi
    return 1
}
httpd_supports_f(){
    # Check if busybox httpd supports -f (run in foreground). Some builds crash with -f
    if [ "$1" = "busybox" ]; then
        busybox httpd -h 2>&1 | grep -q -- ' -f ' && return 0 || return 1
    fi
    return 0
}
start_web_server(){
    if [ -f "$WEB_PID" ] && kill -0 "$(cat "$WEB_PID" 2>/dev/null)" 2>/dev/null; then
        print_status info "Web already running on $WEB_PORT"; return 0; fi
    local httpd_bin
    if ! httpd_bin="$(resolve_httpd_bin)"; then
        print_status error "No httpd found (busybox/Entware). Web UI disabled. Install Entware and run: opkg install busybox"; return 1
    fi
    if [ ! -d "$WEB_DIR" ]; then mkdir -p "$WEB_DIR"; fi
    local args="-p $WEB_PORT -h $WEB_DIR"
    if [ "$httpd_bin" = "busybox" ] && httpd_supports_f busybox; then
        args="-f $args"
    fi
    if [ "$httpd_bin" = "busybox" ]; then
        $httpd_bin httpd $args & echo $! > "$WEB_PID" && print_status success "Started web on port $WEB_PORT (busybox)" || print_status error "Failed to start busybox httpd"
    else
        "$httpd_bin" -p "$WEB_PORT" -h "$WEB_DIR" & echo $! > "$WEB_PID" && print_status success "Started web on port $WEB_PORT (httpd)" || print_status error "Failed to start httpd"
    fi
}
stop_web_server(){ if [ -f "$WEB_PID" ]; then kill $(cat "$WEB_PID" 2>/dev/null) 2>/dev/null; rm -f "$WEB_PID"; print_status success "Web server stopped"; else print_status info "Web server not running"; fi }
web_status(){ if [ -f "$WEB_PID" ] && kill -0 $(cat "$WEB_PID" 2>/dev/null) 2>/dev/null; then echo running; else echo stopped; fi }
# ---------------- Install/Uninstall ----------------
install_addon(){
    check_merlin
    ensure_dirs
    create
