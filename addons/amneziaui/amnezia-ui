#!/bin/sh
# Amnezia-UI for ASUSWRT-Merlin
# AmneziaWG (WireGuard with DPI bypass) addon
# Provides command-line and web interface management
VERSION="3.3.0"
BASE_DIR="/jffs/addons/amneziaui"
CONFIG_DIR="$BASE_DIR/configs"
WEB_DIR="$BASE_DIR/web"
CUSTOM_DIR="/jffs/amneziaui_custom"
PID_FILE="/tmp/amneziaui.pid"
LOG_FILE="/tmp/amneziaui.log"
WEB_PID="/tmp/amneziaui_web.pid"
WEB_PORT="8080"
ASP_DIR="$WEB_DIR/asp"
ASP_INDEX="$ASP_DIR/index.asp"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
}

# Print colored output
print_status() {
    case $1 in
        "error") echo -e "${RED}[ERROR]${NC} $2" ;;
        "success") echo -e "${GREEN}[OK]${NC} $2" ;;
        "warning") echo -e "${YELLOW}[WARNING]${NC} $2" ;;
        *) echo "[INFO] $1" ;;
    esac
    log "$1: $2"
}

# Check if running on ASUSWRT-Merlin
check_merlin() {
    # Accept either the presence of .asusrouter or explicit 'merlin' in uname
    if [ -f /jffs/.asusrouter ]; then
        return 0
    fi
    if uname -a 2>/dev/null | grep -iq merlin; then
        # Create marker to align with YazFi/XRAYUI behavior
        touch /jffs/.asusrouter 2>/dev/null && return 0
    fi
    print_status "error" "This addon requires ASUSWRT-Merlin firmware"
    print_status "info" "If you run Merlin, create marker: touch /jffs/.asusrouter"
    exit 1
}

# Create directory structure
create_dirs() {
    for dir in "$BASE_DIR" "$CONFIG_DIR" "$WEB_DIR" "$CUSTOM_DIR" "$ASP_DIR"; do
        if [ ! -d "$dir" ]; then
            mkdir -p "$dir"
            print_status "success" "Created directory: $dir"
        fi
    done
}

# Generate ASP page similar to xrayui
generate_asp() {
    mkdir -p "$ASP_DIR"
    local lan_ip
    lan_ip=$(nvram get lan_ipaddr 2>/dev/null || echo "router-ip")
    cat > "$ASP_INDEX" << 'EOF_ASP'
<% nvram("lan_ipaddr"); %>
<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Amnezia-UI</title>
<style>
body{font-family:Arial,sans-serif;margin:16px}
.container{max-width:900px;margin:0 auto}
.card{border:1px solid #ddd;padding:16px;border-radius:8px;margin:10px 0}
.badge{display:inline-block;padding:4px 8px;border-radius:12px;background:#eef}
</style>
<script>
function fetchStatus(){
  fetch('/status.json').then(r=>r.json()).then(js=>{
    document.getElementById('iface').textContent=js.interface;
    document.getElementById('state').textContent=js.state;
    document.getElementById('port').textContent=js.web_port;
  }).catch(_=>{});
}
setInterval(fetchStatus, 3000);
window.onload=fetchStatus;
</script>
</head>
<body>
<div class="container">
  <h2>Amnezia-UI</h2>
  <div class="card">
    <div>Interface: <span id="iface" class="badge">amnezia0</span></div>
    <div>Status: <span id="state" class="badge">unknown</span></div>
    <div>Web Port: <span id="port" class="badge">8080</span></div>
  </div>
  <div class="card">
    <button onclick="location.href='/start'">Start</button>
    <button onclick="location.href='/stop'">Stop</button>
    <button onclick="location.href='/restart'">Restart</button>
  </div>
</div>
</body>
</html>
EOF_ASP
}

# Emit simple JSON status used by ASP page
emit_status_json() {
    local iface="amnezia0"
    local state="stopped"
    if [ -f "$PID_FILE" ] && kill -0 $(cat "$PID_FILE") 2>/dev/null; then
        state="running"
    fi
    cat > "$WEB_DIR/status.json" <<EOF
{"interface":"$iface","state":"$state","web_port":"$WEB_PORT"}
EOF
}

# Install function
install_addon() {
    print_status "info" "Installing Amnezia-UI v$VERSION..."
    check_merlin
    create_dirs
    generate_asp

    # Copy binary if exists
    if [ -f "$BASE_DIR/amneziawg-go" ]; then
        chmod +x "$BASE_DIR/amneziawg-go"
        print_status "success" "AmneziWG binary ready"
    fi

    # Create symlink for global access
    ln -sf "$BASE_DIR/amnezia-ui" "/jffs/scripts/amnezia-ui" 2>/dev/null

    # Ensure hooks exist (idempotent)
    if ! grep -q amnezia-ui "/jffs/scripts/services-start" 2>/dev/null; then
        cat >> "/jffs/scripts/services-start" <<'AUTOSTART_APPEND'
/jffs/scripts/amnezia-ui web start &
AUTOSTART_APPEND
        chmod 755 "/jffs/scripts/services-start"
    fi
    if [ ! -f "/jffs/scripts/firewall-start" ]; then
        echo "#!/bin/sh" > "/jffs/scripts/firewall-start"
        chmod 755 "/jffs/scripts/firewall-start"
    fi

    print_status "success" "Installation completed successfully"
}

# Uninstall function
uninstall_addon() {
    print_status "info" "Uninstalling Amnezia-UI..."
    stop_all_interfaces
    stop_web
    rm -rf "$BASE_DIR"
    rm -f "/jffs/scripts/amnezia-ui"
    print_status "success" "Uninstallation completed"
}

# Start interface
start_interface() {
    local interface="$1"
    [ -z "$interface" ] && interface="amnezia0"
    local config="$CONFIG_DIR/$interface.conf"
    if [ ! -f "$config" ]; then
        print_status "warning" "Config missing: $config (starting skeleton)"
    fi
    [ -f "$CUSTOM_DIR/pre-start" ] && . "$CUSTOM_DIR/pre-start"
    print_status "info" "Starting interface: $interface"
    # TODO: integrate amneziawg-go start here
    echo $$ > "$PID_FILE"
    [ -f "$CUSTOM_DIR/post-start" ] && . "$CUSTOM_DIR/post-start"
    print_status "success" "Interface $interface started"
    emit_status_json
}

# Stop interface
stop_interface() {
    local interface="$1"; [ -z "$interface" ] && interface="amnezia0"
    print_status "info" "Stopping interface: $interface"
    if [ -f "$PID_FILE" ]; then
        kill $(cat "$PID_FILE") 2>/dev/null || true
        rm -f "$PID_FILE"
    fi
    print_status "success" "Interface $interface stopped"
    emit_status_json
}

stop_all_interfaces() {
    print_status "info" "Stopping all AmneziaWG interfaces..."
    stop_interface "amnezia0"
    print_status "success" "All interfaces stopped"
}

restart_interface() { local interface="$1"; stop_interface "$interface"; sleep 1; start_interface "$interface"; }

# Add configuration
add_config() {
    local config_file="$1"
    if [ -z "$config_file" ] || [ ! -f "$config_file" ]; then
        print_status "error" "Configuration file not found: $config_file"
        return 1
    fi
    local basename=$(basename "$config_file")
    cp "$config_file" "$CONFIG_DIR/$basename"
    print_status "success" "Configuration added: $basename"
}

# Start web interface with routes incl. /asp
start_web() {
    if [ -f "$WEB_PID" ] && kill -0 $(cat "$WEB_PID") 2>/dev/null; then
        print_status "warning" "Web interface already running on port $WEB_PORT"
        return 0
    fi

    print_status "info" "Starting web interface on port $WEB_PORT..."

    # Minimal HTTPd content root
    mkdir -p "$WEB_DIR"

    # Index page
    cat > "$WEB_DIR/index.html" << EOF
<!DOCTYPE html>
<html><head><meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1"><title>Amnezia-UI</title></head>
<body>
<h3>Amnezia-UI Web Interface v$VERSION</h3>
<p>Web interface is running on port $WEB_PORT</p>
<p><a href="/asp">Open ASP status page</a></p>
</body></html>
EOF

    # Status JSON
    emit_status_json

    # Start busybox httpd
    cd "$WEB_DIR"
    nohup busybox httpd -p "$WEB_PORT" -h . >/dev/null 2>&1 &
    echo $! > "$WEB_PID"

    print_status "success" "Web interface started on http://$(nvram get lan_ipaddr 2>/dev/null || echo router-ip):$WEB_PORT"
}

stop_web() {
    if [ -f "$WEB_PID" ]; then
        local pid=$(cat "$WEB_PID")
        if kill -0 "$pid" 2>/dev/null; then
            kill "$pid"
            print_status "success" "Web interface stopped"
        fi
        rm -f "$WEB_PID"
    else
        print_status "info" "Web interface not running"
    fi
}

web_status() {
    if [ -f "$WEB_PID" ] && kill -0 $(cat "$WEB_PID") 2>/dev/null; then
        print_status "success" "Web interface running on port $WEB_PORT"
    else
        print_status "info" "Web interface not running"
    fi
}

show_status() {
    print_status "info" "Amnezia-UI v$VERSION Status"
    echo "Base directory: $BASE_DIR"
    echo "Configuration directory: $CONFIG_DIR"
    echo "Custom scripts directory: $CUSTOM_DIR"
    web_status
}

show_usage() {
    cat << EOF
Amnezia-UI v$VERSION - AmneziaWG Management Tool
Usage: $0 [command] [options]
Commands:
  install                 Install/reinstall addon
  uninstall               Remove addon completely
  start [interface]       Start interface (default: amnezia0)
  stop [interface]        Stop interface (default: amnezia0)
  restart [interface]     Restart interface (default: amnezia0)
  status                  Show status information
  add <config_file>       Add configuration file
  web start|stop|status   Manage web interface
Notes:
  - Web UI exposes /asp (ASP-like page) at http://router-ip:8080/asp
  - Auto-start via services-start is configured by installer
EOF
}

main() {
    case "$1" in
        install) install_addon ;;
        uninstall) uninstall_addon ;;
        start) start_interface "$2" ;;
        stop) stop_interface "$2" ;;
        restart) restart_interface "$2" ;;
        add) add_config "$2" ;;
        status) show_status ;;
        web)
            case "$2" in
                start) start_web ;;
                stop) stop_web ;;
                status) web_status ;;
                *) print_status "error" "Invalid web command. Use: start, stop, or status"; exit 1 ;;
            esac
            ;;
        "") show_usage ;;
        *) print_status "error" "Unknown command: $1"; show_usage; exit 1 ;;
    esac
}

main "$@"
