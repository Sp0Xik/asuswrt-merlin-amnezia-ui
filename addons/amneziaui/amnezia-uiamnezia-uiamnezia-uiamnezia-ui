#!/bin/sh
# Amnezia-UI for ASUSWRT-Merlin
# AmneziaWG (WireGuard with DPI bypass) addon
# Provides command-line and web interface management with router ASP integration
# POSIX/BusyBox compatible version - no bashisms

VERSION="3.6.2"
BASE_DIR="/jffs/addons/amneziaui"
CONFIG_DIR="$BASE_DIR/configs"
WEB_DIR="$BASE_DIR/web"
CUSTOM_DIR="/jffs/amneziaui_custom"
PID_FILE="/tmp/amneziaui.pid"
LOG_FILE="/tmp/amneziaui.log"
WEB_PID="/tmp/amneziaui_web.pid"
WEB_PORT="8080"
ASP_DIR="$WEB_DIR/asp"
ASP_INDEX="$ASP_DIR/index.asp"
OVERLAY_DIR="/jffs/overlay/www"
STOCK_WWW="/www"
VPN_ASP="Advanced_VPN_Content.asp"
FIREWALL_ASP="Advanced_Firewall_Content.asp"
VPN_TABS_ASP="VPN.asp"
MENU_TREE_JS="menuTree.js"
USER_ASP_NAME="user_amneziaui.asp"
USER_ASP_PATH="$STOCK_WWW/$USER_ASP_NAME"
USER2_ASP="User2.asp"

# Colors for output - POSIX compatible
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
}

# Print status with colors
print_status() {
    case "$1" in
        error)
            printf "${RED}[ERROR]${NC} %s\n" "$2"
            ;;
        success)
            printf "${GREEN}[OK]${NC} %s\n" "$2"
            ;;
        warning)
            printf "${YELLOW}[WARNING]${NC} %s\n" "$2"
            ;;
        info|*)
            printf "[INFO] %s\n" "$2"
            ;;
    esac
    log "$1: $2"
}

# Check ASUSWRT-Merlin compatibility
check_merlin() {
    if [ -f "/jffs/.asusrouter" ]; then
        print_status success "ASUSWRT-Merlin compatibility confirmed (marker found)"
        return 0
    fi
    
    if uname -a 2>/dev/null | grep -i "merlin" >/dev/null 2>&1; then
        print_status info "Merlin detected, creating compatibility marker"
        if touch "/jffs/.asusrouter" 2>/dev/null; then
            print_status success "Compatibility marker created successfully"
            return 0
        fi
    fi
    
    print_status warning "ASUSWRT-Merlin firmware not detected"
    print_status info "Continuing anyway - to force, run: touch /jffs/.asusrouter"
    return 0
}

# Ensure required directories exist
ensure_dirs() {
    mkdir -p "$CONFIG_DIR" "$WEB_DIR" "$ASP_DIR" "$CUSTOM_DIR" 2>/dev/null || {
        print_status error "Failed to create required directories"
        return 1
    }
    return 0
}

# User ASP template creation
user_asp_template() {
    cat << 'EOF'
<%nvram("productid");%><!DOCTYPE html>
<html><head>
<meta charset="utf-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Amnezia-UI â€” mini UI</title>
<style>
body{font-family:Arial,Helvetica,sans-serif;margin:0;background:#0b1220;color:#e6edf3}
header{background:#161b22;padding:12px 16px;border-bottom:1px solid #30363d}
h1{font-size:18px;margin:0}
.wrap{padding:16px}
.card{background:#0d1117;border:1px solid #30363d;border-radius:8px;padding:16px}
.btn{display:inline-block;background:#238636;color:#fff;padding:10px 14px;border-radius:6px;text-decoration:none}
.btn.secondary{background:#0969da}
.row{display:flex;gap:12px;flex-wrap:wrap}
iframe{width:100%;height:70vh;border:1px solid #30363d;border-radius:6px;background:#fff}
.hint{color:#8b949e;font-size:12px;margin-top:8px}
</style>
</head><body>
<header><h1>Amnezia-UI Control Panel</h1></header>
<div class="wrap">
  <div class="card">
    <div class="row">
      <a class="btn" href="/user_amneziaui.asp?open=ui">Open embedded UI</a>
      <a class="btn secondary" href="http://<%nvram("lan_ipaddr");%>:8080/" target="_blank">Open full UI (new tab)</a>
    </div>
    <p class="hint">Service must be running on port 8080. Start via amnezia-ui script if needed.</p>
  </div>
  
  <%if request_form("open") == "ui" then%>
  <div class="card">
    <iframe src="http://<%nvram("lan_ipaddr");%>:8080/" frameborder="0"></iframe>
  </div>
  <%end%>
</div>
</body></html>
EOF
}

# Install addon integration
install_addon() {
    print_status info "Installing Amnezia-UI addon integration..."
    
    if ! ensure_dirs; then
        return 1
    fi
    
    # Create user ASP file
    if user_asp_template > "$USER_ASP_PATH" 2>/dev/null; then
        print_status success "User ASP file created: $USER_ASP_PATH"
    else
        print_status error "Failed to create user ASP file"
        return 1
    fi
    
    # Set permissions
    chmod 755 "$USER_ASP_PATH" 2>/dev/null || {
        print_status warning "Could not set permissions on ASP file"
    }
    
    print_status success "Addon installation completed"
    return 0
}

# Remove addon integration
uninstall_addon() {
    print_status info "Removing Amnezia-UI addon integration..."
    
    # Remove user ASP file
    if [ -f "$USER_ASP_PATH" ]; then
        if rm "$USER_ASP_PATH" 2>/dev/null; then
            print_status success "User ASP file removed"
        else
            print_status warning "Could not remove user ASP file"
        fi
    fi
    
    # Stop services
    stop_web
    
    print_status success "Addon uninstallation completed"
    return 0
}

# Start web interface
start_web() {
    if [ -f "$WEB_PID" ] && kill -0 "$(cat "$WEB_PID")" 2>/dev/null; then
        print_status warning "Web interface already running (PID: $(cat "$WEB_PID"))"
        return 0
    fi
    
    print_status info "Starting web interface on port $WEB_PORT..."
    
    # Simple web server using netcat if available, otherwise try busybox httpd
    if command -v httpd >/dev/null 2>&1; then
        # Use busybox httpd
        mkdir -p "$WEB_DIR/htdocs" 2>/dev/null
        echo "<h1>Amnezia-UI Web Interface</h1><p>Service running on port $WEB_PORT</p>" > "$WEB_DIR/htdocs/index.html"
        
        httpd -p "$WEB_PORT" -h "$WEB_DIR/htdocs" 2>/dev/null &
        WEB_SERVER_PID=$!
        echo "$WEB_SERVER_PID" > "$WEB_PID"
        
        # Verify the process started
        sleep 1
        if kill -0 "$WEB_SERVER_PID" 2>/dev/null; then
            print_status success "Web interface started (PID: $WEB_SERVER_PID)"
            return 0
        else
            print_status error "Failed to start web interface"
            rm -f "$WEB_PID" 2>/dev/null
            return 1
        fi
    else
        print_status error "No suitable web server found (httpd not available)"
        return 1
    fi
}

# Stop web interface
stop_web() {
    if [ ! -f "$WEB_PID" ]; then
        print_status info "Web interface not running (no PID file)"
        return 0
    fi
    
    WEB_SERVER_PID=$(cat "$WEB_PID")
    if kill -0 "$WEB_SERVER_PID" 2>/dev/null; then
        if kill "$WEB_SERVER_PID" 2>/dev/null; then
            print_status success "Web interface stopped (PID: $WEB_SERVER_PID)"
        else
            print_status warning "Could not stop web interface process"
        fi
    else
        print_status info "Web interface process not running"
    fi
    
    rm -f "$WEB_PID" 2>/dev/null
    return 0
}

# Restart web interface
restart_web() {
    print_status info "Restarting web interface..."
    stop_web
    sleep 2
    start_web
}

# Show status
show_status() {
    echo "=== Amnezia-UI Status ==="
    echo "Version: $VERSION"
    echo "Base directory: $BASE_DIR"
    echo "Config directory: $CONFIG_DIR"
    echo "Web port: $WEB_PORT"
    echo
    
    # Check web interface
    if [ -f "$WEB_PID" ] && kill -0 "$(cat "$WEB_PID")" 2>/dev/null; then
        print_status success "Web interface running (PID: $(cat "$WEB_PID"))"
    else
        print_status warning "Web interface not running"
    fi
    
    # Check ASP file
    if [ -f "$USER_ASP_PATH" ]; then
        print_status success "User ASP file exists: $USER_ASP_PATH"
    else
        print_status warning "User ASP file not found"
    fi
    
    # Check directories
    if [ -d "$BASE_DIR" ]; then
        print_status success "Base directory exists"
        echo "Directory contents:"
        ls -la "$BASE_DIR" 2>/dev/null || echo "Cannot list directory contents"
    else
        print_status warning "Base directory not found"
    fi
    
    echo
}

# Show help
show_help() {
    echo "Amnezia-UI for ASUSWRT-Merlin v$VERSION"
    echo "POSIX/BusyBox compatible version"
    echo
    echo "Usage: $0 [command]"
    echo
    echo "Commands:"
    echo "  install_addon    Install addon integration (creates user ASP)"
    echo "  uninstall_addon  Remove addon integration"
    echo "  start_web        Start web interface"
    echo "  stop_web         Stop web interface  "
    echo "  restart_web      Restart web interface"
    echo "  status           Show current status"
    echo "  help             Show this help message"
    echo
    echo "Examples:"
    echo "  $0 install_addon"
    echo "  $0 start_web"
    echo "  $0 status"
    echo
}

# Main execution logic
main() {
    # Always check Merlin compatibility
    check_merlin
    
    case "${1:-help}" in
        install_addon|install)
            install_addon
            ;;
        uninstall_addon|uninstall)
            uninstall_addon
            ;;
        start_web|web|start)
            start_web
            ;;
        stop_web|stop)
            stop_web
            ;;
        restart_web|restart)
            restart_web
            ;;
        status|stat)
            show_status
            ;;
        help|--help|-h|'')
            show_help
            ;;
        *)
            print_status error "Unknown command: $1"
            echo
            show_help
            exit 1
            ;;
    esac
}

# Execute main function with all arguments
main "$@"
