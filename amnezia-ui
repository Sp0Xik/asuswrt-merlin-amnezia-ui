#!/bin/sh

# Amnezia-UI Script for ASUSWRT-Merlin
# Handles install/uninstall/start/stop + AJAX actions
# Compatible with Merlin WireGuard, VPN Director
# Selective routing via iptables (IP/domains)
# Full AmneziaWG support (v0.2.15 with H1-H4, S3, S4)
# Dynamically assigns userN.asp and adds button to VPN tab

VERSION="0.2.3.1"
CONFIG_DIR="/jffs/amnezia-ui/configs"
BINARY="/opt/bin/amneziawg-go"
CUSTOM_DIR="/jffs/amnezia-ui_custom"
UNINSTALL_LOG="/tmp/amnezia-ui-uninstall.log"
INSTALL_LOG="/tmp/amnezia-ui-install.log"
WEB_DIR="/www"

# CGI-like parsing for HTTP requests (from JS fetch)
if [ -n "$QUERY_STRING" ]; then
    ACTION=$(echo "$QUERY_STRING" | sed 's/.*action=\([^&]*\).*/\1/')
    IFACE=$(echo "$QUERY_STRING" | sed 's/.*iface=\([^&]*\).*/\1/')
elif [ -n "$CONTENT_LENGTH" ]; then
    read -r POST_DATA <&0
    ACTION=$(echo "$POST_DATA" | sed 's/.*action=\([^&]*\).*/\1/')
    IFACE=$(echo "$POST_DATA" | sed 's/.*iface=\([^&]*\).*/\1/')
    PRIVATE_KEY=$(echo "$POST_DATA" | sed 's/.*private-key=\([^&]*\).*/\1/')
    PUBLIC_KEY=$(echo "$POST_DATA" | sed 's/.*public-key=\([^&]*\).*/\1/')
    ENDPOINT=$(echo "$POST_DATA" | sed 's/.*endpoint=\([^&]*\).*/\1/')
    ALLOWED_IPS=$(echo "$POST_DATA" | sed 's/.*allowed-ips=\([^&]*\).*/\1/')
    PSK=$(echo "$POST_DATA" | sed 's/.*psk=\([^&]*\).*/\1/')
    OBFS=$(echo "$POST_DATA" | sed 's/.*obfs=on.*/1/' | grep -q 1 && echo "true" || echo "false")
    S1=$(echo "$POST_DATA" | sed 's/.*s1=\([^&]*\).*/\1/')
    S2=$(echo "$POST_DATA" | sed 's/.*s2=\([^&]*\).*/\1/')
    S3=$(echo "$POST_DATA" | sed 's/.*s3=\([^&]*\).*/\1/')
    S4=$(echo "$POST_DATA" | sed 's/.*s4=\([^&]*\).*/\1/')
    H1_H4=$(echo "$POST_DATA" | sed 's/.*h1-h4=\([1-4]*\).*/\1/')
    RULES=$(echo "$POST_DATA" | sed 's/.*rules=\([^&]*\).*/\1/')
fi

json_output() {
    echo "Content-Type: application/json"
    echo ""
    echo "$1"
    exit 0
}

text_output() {
    echo "Content-Type: text/plain"
    echo ""
    echo "$1"
    exit 0
}

# Find next available userN.asp
find_free_asp() {
    local i=1
    while [ -f "$WEB_DIR/user$i.asp" ]; do
        i=$((i + 1))
    done
    echo "user$i.asp"
}

# Check network connectivity to GitHub
check_network() {
    echo "Checking network connectivity to GitHub..." | tee -a "$INSTALL_LOG"
    ping -c 1 github.com >> "$INSTALL_LOG" 2>&1
    if [ $? -ne 0 ]; then
        echo "Cannot ping github.com. Checking DNS..." | tee -a "$INSTALL_LOG"
        nslookup github.com 8.8.8.8 >> "$INSTALL_LOG" 2>&1
        if [ $? -ne 0 ]; then
            echo "DNS resolution failed. Adding temporary DNS..." | tee -a "$INSTALL_LOG"
            echo "server=8.8.8.8" >> /jffs/configs/dnsmasq.conf.add
            killall -HUP dnsmasq 2>>"$INSTALL_LOG"
        fi
    fi
    curl -I https://github.com/amnezia-vpn/amneziawg-go >> "$INSTALL_LOG" 2>&1
    if [ $? -ne 0 ]; then
        echo "Cannot access GitHub. Network issue or GitHub blocked." | tee -a "$INSTALL_LOG"
        return 1
    fi
    return 0
}

# Check if binary exists, compile amneziawg-go v0.2.15 or error
check_binary() {
    if [ ! -x "$BINARY" ]; then
        if [ -f /opt/tmp/opkg.lock ]; then
            echo "Removing stale opkg lock file..." | tee -a "$INSTALL_LOG"
            rm -f /opt/tmp/opkg.lock 2>>"$INSTALL_LOG"
        fi
        opkg update >> "$INSTALL_LOG" 2>&1 || { echo "Failed to update opkg. Check Entware repository." | tee -a "$INSTALL_LOG"; exit 1; }
        for pkg in make go git git-http; do
            opkg list-installed | grep -q "^$pkg " || { echo "Installing $pkg for compilation..." | tee -a "$INSTALL_LOG"; opkg install "$pkg" >> "$INSTALL_LOG" 2>&1 || { echo "Cannot install $pkg. Check Entware repository or try 'opkg install $pkg' manually." | tee -a "$INSTALL_LOG"; exit 1; }; }
        done
        for pkg in ipset jq; do
            opkg list-installed | grep -q "^$pkg " || { echo "Installing $pkg for runtime..." | tee -a "$INSTALL_LOG"; opkg install "$pkg" >> "$INSTALL_LOG" 2>&1 || { echo "Cannot install $pkg. Check Entware repository or try 'opkg install $pkg' manually." | tee -a "$INSTALL_LOG"; exit 1; }; }
        done
        echo "Checking /opt space:" | tee -a "$INSTALL_LOG"
        df -k /opt | tee -a "$INSTALL_LOG"
        FREE_SPACE_KB=$(df -k /opt | awk 'NR==2 {print $4}')
        if [ -z "$FREE_SPACE_KB" ] || [ "$FREE_SPACE_KB" -lt 52480 ]; then
            echo "Insufficient space in /opt. Free up ~50MB (available: ${FREE_SPACE_KB:-0}KB). Run 'df -h /opt' and free up space." | tee -a "$INSTALL_LOG"
            exit 1
        fi
        echo "Available space: $FREE_SPACE_KB KB" | tee -a "$INSTALL_LOG"
        cd /tmp || { echo "Failed to change to /tmp directory." | tee -a "$INSTALL_LOG"; exit 1; }
        check_network || { echo "Network check failed. Trying wget fallback..." | tee -a "$INSTALL_LOG"; }
        for attempt in 1 2 3; do
            echo "Attempting git clone (attempt $attempt/3)..." | tee -a "$INSTALL_LOG"
            git clone --branch v0.2.15 https://github.com/amnezia-vpn/amneziawg-go >> "$INSTALL_LOG" 2>&1
            if [ $? -eq 0 ]; then
                break
            fi
            echo "Git clone failed, attempt $attempt/3. Retrying in 5 seconds..." | tee -a "$INSTALL_LOG"
            sleep 5
        done
        if [ ! -d /tmp/amneziawg-go ]; then
            echo "Git clone failed after 3 attempts. Trying wget fallback..." | tee -a "$INSTALL_LOG"
            wget -O /tmp/amneziawg-go.tar.gz https://github.com/amnezia-vpn/amneziawg-go/archive/refs/tags/v0.2.15.tar.gz >> "$INSTALL_LOG" 2>&1
            if [ $? -eq 0 ]; then
                tar -xzf /tmp/amneziawg-go.tar.gz -C /tmp >> "$INSTALL_LOG" 2>&1
                mv /tmp/amneziawg-go-0.2.15 /tmp/amneziawg-go
            else
                echo "Wget fallback failed. Check network, DNS, or GitHub availability." | tee -a "$INSTALL_LOG"
                exit 1
            fi
        fi
        if [ ! -d /tmp/amneziawg-go ]; then
            echo "Failed to obtain amneziawg-go v0.2.15 after all attempts. Check $INSTALL_LOG." | tee -a "$INSTALL_LOG"
            exit 1
        fi
        cd amneziawg-go || { echo "Failed to change to amneziawg-go directory." | tee -a "$INSTALL_LOG"; exit 1; }
        GOOS=linux GOARCH=arm GOARM=7 make >> "$INSTALL_LOG" 2>&1
        if [ $? -ne 0 ]; then
            echo "Failed to build amneziawg-go v0.2.15. Check $INSTALL_LOG for make errors." | tee -a "$INSTALL_LOG"
            exit 1
        fi
        if [ ! -f amneziawg-go ]; then
            echo "Build succeeded but amneziawg-go binary not found. Check repository or build process." | tee -a "$INSTALL_LOG"
            exit 1
        fi
        cp amneziawg-go $BINARY && chmod +x $BINARY
        if [ $? -ne 0 ]; then
            echo "Failed to copy amneziawg-go to $BINARY. Check permissions or disk space." | tee -a "$INSTALL_LOG"
            exit 1
        fi
        rm -rf /tmp/amneziawg-go /tmp/amneziawg-go.tar.gz
        if [ ! -x "$BINARY" ]; then
            echo "Failed to build amneziawg-go v0.2.15. Check $INSTALL_LOG, ensure make, go, git are installed via opkg, check /opt space (df -h /opt)." | tee -a "$INSTALL_LOG"
            exit 1
        fi
        for pkg in make go git git-http; do
            if opkg list-installed | grep -q "^$pkg "; then
                if check_package_usage "$pkg"; then
                    echo "Removing $pkg (used only for compilation)..." | tee -a "$INSTALL_LOG"
                    opkg remove --autoremove "$pkg" >> "$INSTALL_LOG" 2>&1
                else
                    echo "Keeping $pkg (used by other addons/Merlin)." | tee -a "$INSTALL_LOG"
                fi
            fi
        done
    fi
}

# Function to check if a package is used by other addons or Merlin
check_package_usage() {
    local pkg="$1"
    echo "Checking usage of $pkg..." >> "$UNINSTALL_LOG"
    if opkg depends "$pkg" | grep -qE "^[a-zA-Z0-9]"; then
        echo "$pkg is a dependency for other packages. Skipping removal." >> "$UNINSTALL_LOG"
        return 1
    fi
    if [ "$pkg" = "ipset" ] && nvram get vpndirector_rulelist | grep -q .; then
        echo "ipset used by VPN Director (nvram vpndirector_rulelist). Skipping removal." >> "$UNINSTALL_LOG"
        return 1
    fi
    if [ "$pkg" = "make" ] || [ "$pkg" = "go" ] || [ "$pkg" = "git" ] || [ "$pkg" = "git-http" ] || [ "$pkg" = "jq" ]; then
        if find /jffs/scripts /jffs/addons -type f -exec grep -qE "$pkg " {} \; 2>/dev/null; then
            echo "$pkg used by other scripts/addons in /jffs/scripts or /jffs/addons. Skipping removal." | tee -a "$UNINSTALL_LOG"
            return 1
        fi
    fi
    return 0
}

# Function to generate custom firewall script for selective routing
generate_firewall_script() {
    if [ -n "$RULES" ]; then
        FIREWALL_SCRIPT="$CUSTOM_DIR/firewall_client"
        CLEANUP_SCRIPT="$CUSTOM_DIR/firewall_cleanup"
        DNSMASQ_CONF="$CUSTOM_DIR/dnsmasq_rules.conf"

        echo "#!/bin/sh" > "$FIREWALL_SCRIPT"
        echo "# Selective routing for AmneziaWG ($IFACE)" >> "$FIREWALL_SCRIPT"
        echo "iptables -t mangle -N AMNEZIA-MARK" >> "$FIREWALL_SCRIPT"
        echo "iptables -t mangle -A AMNEZIA-MARK -j MARK --set-mark 0x80000" >> "$FIREWALL_SCRIPT"
        for rule in $(echo "$RULES" | tr ',' ' '); do
            if [ -n "$rule" ]; then
                if echo "$rule" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+(/[0-9]+)?$'; then
                    echo "iptables -t mangle -A AMNEZIA-MARK -d $rule -j MARK --set-mark 0x80000" >> "$FIREWALL_SCRIPT"
                else
                    echo "address=/$rule/0.0.0.0" >> "$DNSMASQ_CONF"
                    echo "ipset=/$rule/amnezia_vpn" >> "$DNSMASQ_CONF"
                    echo "iptables -t mangle -A AMNEZIA-MARK -m set --match-set amnezia_vpn dst -j MARK --set-mark 0x80000" >> "$FIREWALL_SCRIPT"
                fi
            fi
        done
        echo "iptables -t mangle -A PREROUTING -j AMNEZIA-MARK" >> "$FIREWALL_SCRIPT"
        chmod +x "$FIREWALL_SCRIPT"
        echo "#!/bin/sh" > "$CLEANUP_SCRIPT"
        echo "iptables -t mangle -F AMNEZIA-MARK" >> "$CLEANUP_SCRIPT"
        echo "iptables -t mangle -X AMNEZIA-MARK" >> "$CLEANUP_SCRIPT"
        chmod +x "$CLEANUP_SCRIPT"
        if [ -f "$DNSMASQ_CONF" ]; then
            killall -HUP dnsmasq 2>/dev/null
        fi
    fi
}

# Function to install the plugin
install() {
    check_binary
    mkdir -p "$CONFIG_DIR" "$CUSTOM_DIR" "$WEB_DIR"
    
    ASP_PAGE="$WEB_DIR/$(find_free_asp)"
    echo "Installing Amnezia-UI web interface ($ASP_PAGE)..." | tee -a "$INSTALL_LOG"
    cp /jffs/addons/amnezia-ui/amnezia-ui.asp "$ASP_PAGE" >> "$INSTALL_LOG" 2>&1
    if [ $? -ne 0 ] || [ ! -f "$ASP_PAGE" ]; then
        echo "Failed to copy amnezia-ui.asp to $ASP_PAGE. Check permissions or disk space." | tee -a "$INSTALL_LOG"
        exit 1
    fi
    chmod 0644 "$ASP_PAGE"
    
    echo "Adding Amnezia-UI button to VPN tab (/www/vpn_client.asp)..." | tee -a "$INSTALL_LOG"
    if [ -f /www/vpn_client.asp ]; then
        cp /www/vpn_client.asp /www/vpn_client.asp.bak 2>>"$INSTALL_LOG"
        ASP_BASENAME=$(basename "$ASP_PAGE")
        sed -i "/<table class=\"list_table\" id=\"tbl_vpnclient\" width=\"100%\" align=\"center\" border=\"0\" cellspacing=\"1\" cellpadding=\"4\">/a\\
        <tr id=\"amnezia-row\"><td class=\"head\">Amnezia-UI</td><td class=\"head\"><a href=\"/$ASP_BASENAME\" target=\"_blank\">Open</a></td></tr>" /www/vpn_client.asp 2>>"$INSTALL_LOG"
        if [ $? -eq 0 ]; then
            echo "Amnezia-UI button added to VPN tab ($ASP_PAGE)." | tee -a "$INSTALL_LOG"
        else
            echo "Warning: Failed to add button to /www/vpn_client.asp. Add manually or access via http://192.168.50.1/$ASP_BASENAME." | tee -a "$INSTALL_LOG"
        fi
    else
        echo "Warning: /www/vpn_client.asp not found. Button not added. Access via http://192.168.50.1/$ASP_BASENAME." | tee -a "$INSTALL_LOG"
    fi
    service restart_httpd >> "$INSTALL_LOG" 2>&1
    echo "Amnezia-UI v$VERSION installed successfully. Access at http://192.168.50.1/$ASP_BASENAME" | tee -a "$INSTALL_LOG"
}

# Function to uninstall the plugin
uninstall() {
    echo "Uninstalling Amnezia-UI..." | tee -a "$UNINSTALL_LOG"
    for iface in $(ls "$CONFIG_DIR" 2>/dev/null | sed 's/\.conf$//'); do
        sh "$0" stop "$iface" >> "$UNINSTALL_LOG" 2>&1
    done
    ASP_PAGE=$(ls /www/user*.asp 2>/dev/null | grep -l "Amnezia-UI for ASUSWRT-Merlin" | head -n 1)
    rm -rf "$CONFIG_DIR" "$CUSTOM_DIR" "$ASP_PAGE" 2>>"$UNINSTALL_LOG"
    if [ -f /www/vpn_client.asp ]; then
        sed -i '/id="amnezia-row"/d' /www/vpn_client.asp 2>>"$UNINSTALL_LOG"
        if [ -f /www/vpn_client.asp.bak ]; then
            mv /www/vpn_client.asp.bak /www/vpn_client.asp 2>>"$UNINSTALL_LOG"
        fi
        service restart_httpd >> "$UNINSTALL_LOG" 2>&1
    fi
    for pkg in ipset jq; do
        if opkg list-installed | grep -q "^$pkg "; then
            if check_package_usage "$pkg"; then
                echo "Removing $pkg (used only for runtime)..." | tee -a "$UNINSTALL_LOG"
                opkg remove --autoremove "$pkg" >> "$UNINSTALL_LOG" 2>&1
            else
                echo "Keeping $pkg (used by other addons/Merlin)." | tee -a "$UNINSTALL_LOG"
            fi
        fi
    done
    rm -f "$BINARY" 2>>"$UNINSTALL_LOG"
    echo "Amnezia-UI uninstalled successfully." | tee -a "$UNINSTALL_LOG"
}

# Main logic
case "$1" in
    install)
        install
        ;;
    uninstall)
        uninstall
        ;;
    start)
        [ -z "$2" ] && { echo "Usage: $0 start <interface>"; exit 1; }
        IFACE="$2"
        [ ! -f "$CONFIG_DIR/$IFACE.conf" ] && { echo "Configuration $IFACE.conf not found."; exit 1; }
        check_binary
        generate_firewall_script
        amneziawg-go --config "$CONFIG_DIR/$IFACE.conf" &
        text_output "Started $IFACE"
        ;;
    stop)
        [ -z "$2" ] && { echo "Usage: $0 stop <interface>"; exit 1; }
        IFACE="$2"
        [ -f "$CUSTOM_DIR/firewall_cleanup" ] && sh "$CUSTOM_DIR/firewall_cleanup"
        killall -9 amneziawg-go 2>/dev/null
        text_output "Stopped $IFACE"
        ;;
    add|generate)
        [ -z "$IFACE" ] && { json_output "{\"error\": \"Interface not specified\"}"; }
        [ -z "$PRIVATE_KEY" ] && { json_output "{\"error\": \"Private key not specified\"}"; }
        [ -z "$PUBLIC_KEY" ] && { json_output "{\"error\": \"Public key not specified\"}"; }
        [ -z "$ENDPOINT" ] && { json_output "{\"error\": \"Endpoint not specified\"}"; }
        [ -z "$ALLOWED_IPS" ] && { json_output "{\"error\": \"Allowed IPs not specified\"}"; }
        check_binary
        mkdir -p "$CONFIG_DIR"
        cat > "$CONFIG_DIR/$IFACE.conf" << EOF
[Interface]
PrivateKey = $PRIVATE_KEY
Address = 10.0.0.2/32
DNS = 8.8.8.8

[Peer]
PublicKey = $PUBLIC_KEY
Endpoint = $ENDPOINT
AllowedIPs = $ALLOWED_IPS
PersistentKeepalive = 25
${PSK:+PresharedKey = $PSK}
${S1:+S1 = $S1}
${S2:+S2 = $S2}
${S3:+S3 = $S3}
${S4:+S4 = $S4}
${H1_H4:+H1-H4 = $H1_H4}
${OBFS:+# Amnezia Obfuscation enabled (S1/S2/S3/S4/H1-H4 supported)}
EOF
        generate_firewall_script
        json_output "{\"success\": \"Configuration $IFACE saved\"}"
        ;;
    list)
        servers=""
        for conf in "$CONFIG_DIR"/*.conf; do
            [ -f "$conf" ] || continue
            iface=$(basename "$conf" .conf)
            endpoint=$(grep Endpoint "$conf" | cut -d= -f2 | tr -d ' ')
            status=$(pidof amneziawg-go | grep -q . && echo "Running" || echo "Stopped")
            servers="$servers{\"iface\": \"$iface\", \"endpoint\": \"$endpoint\", \"status\": \"$status\"},"
        done
        json_output "[${servers%,}]"
        ;;
    delete)
        [ -z "$IFACE" ] && { json_output "{\"error\": \"Interface not specified\"}"; }
        [ -f "$CONFIG_DIR/$IFACE.conf" ] || { json_output "{\"error\": \"Configuration $IFACE not found\"}"; }
        sh "$0" stop "$IFACE" >/dev/null 2>&1
        rm -f "$CONFIG_DIR/$IFACE.conf"
        json_output "{\"success\": \"Configuration $IFACE deleted\"}"
        ;;
    *)
        echo "Usage: $0 {install|uninstall|start|stop|add|generate|list|delete}"
        exit 1
        ;;
esac
