name: Build and Release Amnezia-UI Package
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v3.2.5)'
        required: true
        default: 'v3.2.5'
      prerelease:
        description: 'Mark as pre-release'
        type: boolean
        default: false
permissions:
  contents: write
  packages: write
  actions: read
env:
  AMNEZIAWG_VERSION: "v0.2.15"
  BUILD_DATE: ${{ github.run_number }}
  COMMIT_SHA: ${{ github.sha }}
jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        arch: [armv7, aarch64, mips]
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential git wget tar gzip
        
    - name: Set up cross-compilation
      run: |
        if [ "${{ matrix.arch }}" = "armv7" ]; then
          echo "GOOS=linux" >> $GITHUB_ENV
          echo "GOARCH=arm" >> $GITHUB_ENV
          echo "GOARM=7" >> $GITHUB_ENV
        elif [ "${{ matrix.arch }}" = "aarch64" ]; then
          echo "GOOS=linux" >> $GITHUB_ENV
          echo "GOARCH=arm64" >> $GITHUB_ENV
        elif [ "${{ matrix.arch }}" = "mips" ]; then
          echo "GOOS=linux" >> $GITHUB_ENV
          echo "GOARCH=mips" >> $GITHUB_ENV
          echo "GOMIPS=softfloat" >> $GITHUB_ENV
        fi
        
    - name: Build amneziawg-go
      run: |
        # Clone amneziawg-go repository
        git clone --branch ${{ env.AMNEZIAWG_VERSION }} https://github.com/amnezia-vpn/amneziawg-go.git
        cd amneziawg-go
        
        # Build for target architecture
        export CGO_ENABLED=0
        go build -v -o amneziawg-go -ldflags "-s -w -X main.Version=${{ env.AMNEZIAWG_VERSION }}"
        
        # Copy binary to build directory
        mkdir -p ../build/${{ matrix.arch }}
        cp amneziawg-go ../build/${{ matrix.arch }}/
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: amneziawg-go-${{ matrix.arch }}
        path: build/${{ matrix.arch }}/amneziawg-go
        retention-days: 30
        
  package:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create architecture-specific packages
      run: |
        # Create architecture-specific packages for ARMv7, AArch64, and MIPS
        for arch in armv7 aarch64 mips; do
          echo "Creating package for $arch..."
          
          # Create package directory structure
          mkdir -p package-$arch/addons/amneziaui
          
          # Copy main script and make executable
          cp addons/amneziaui/amnezia-ui package-$arch/addons/amneziaui/
          chmod +x package-$arch/addons/amneziaui/amnezia-ui
          
          # Copy web interface files if they exist
          if [ -d "addons/amneziaui/web" ]; then
            cp -r addons/amneziaui/web package-$arch/addons/amneziaui/
          else
            mkdir -p package-$arch/addons/amneziaui/web
          fi
          
          # Copy config files if they exist
          if [ -d "addons/amneziaui/configs" ]; then
            cp -r addons/amneziaui/configs package-$arch/addons/amneziaui/
          else
            mkdir -p package-$arch/addons/amneziaui/configs
          fi
          
          # Add the architecture-specific binary
          if [ -f "amneziawg-go-$arch/amneziawg-go" ]; then
            cp amneziawg-go-$arch/amneziawg-go package-$arch/addons/amneziaui/amneziawg-go
            chmod +x package-$arch/addons/amneziaui/amneziawg-go
            echo "Using $arch binary"
          else
            echo "Warning: $arch binary not found"
            continue
          fi
          
          # Create version info (avoid YAML parsing issues)
          VERSION_REF="${{ github.event.inputs.version || github.ref_name }}"
          echo "VERSION=$VERSION_REF" > package-$arch/addons/amneziaui/version.info
          echo "BUILD_DATE=$(date -u "+%Y-%m-%d %H:%M:%S UTC")" >> package-$arch/addons/amneziaui/version.info
          echo "BUILD_NUMBER=${{ env.BUILD_DATE }}" >> package-$arch/addons/amneziaui/version.info
          echo "COMMIT_SHA=${{ env.COMMIT_SHA }}" >> package-$arch/addons/amneziaui/version.info
          echo "AMNEZIAWG_VERSION=${{ env.AMNEZIAWG_VERSION }}" >> package-$arch/addons/amneziaui/version.info
          echo "ARCHITECTURE=$arch" >> package-$arch/addons/amneziaui/version.info
          
          # Create the final architecture-specific package
          cd package-$arch
          tar -czf ../amnezia-ui-package-$arch.tar.gz addons/
          cd ..
          
          # Verify package structure
          echo "Package contents for $arch:"
          tar -tzf amnezia-ui-package-$arch.tar.gz
          
          # Calculate checksum
          sha256sum amnezia-ui-package-$arch.tar.gz > amnezia-ui-package-$arch.tar.gz.sha256
        done
        
        # List all created packages
        echo "All packages created:"
        ls -la *.tar.gz
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.inputs.version || github.ref_name }}
        name: Amnezia-UI Multi-Architecture ${{ github.event.inputs.version || github.ref_name }} - Ultimate DPI Bypass Edition
        body: |
          📦 **Multi-Architecture Release Package for ASUSWRT-Merlin**
          
          This release provides separate architecture-specific packages:
          - `amnezia-ui-package-armv7.tar.gz` - For ARMv7 routers
          - `amnezia-ui-package-aarch64.tar.gz` - For AArch64/ARM64 routers  
          - `amnezia-ui-package-mips.tar.gz` - For MIPS routers
          
          📁 **Package Structure** (each architecture)
          ```
          addons/
          └── amneziaui/
              ├── amneziawg-go           # Architecture-specific AmneziaWG binary
              ├── web/                   # Web interface files
              ├── configs/               # Configuration files directory
              └── amnezia-ui            # Main control script
          ```
          
          🚀 **Installation**
          
          Automatic installation (detects architecture):
          ```bash
          curl -sSL https://raw.githubusercontent.com/Sp0Xik/asuswrt-merlin-amnezia-ui/main/install.sh | sh
          ```
          
          Manual architecture-specific install:
          ```bash
          # For ARMv7
          wget https://github.com/Sp0Xik/asuswrt-merlin-amnezia-ui/releases/latest/download/amnezia-ui-package-armv7.tar.gz
          
          # For AArch64/ARM64
          wget https://github.com/Sp0Xik/asuswrt-merlin-amnezia-ui/releases/latest/download/amnezia-ui-package-aarch64.tar.gz
          
          # For MIPS
          wget https://github.com/Sp0Xik/asuswrt-merlin-amnezia-ui/releases/latest/download/amnezia-ui-package-mips.tar.gz
          
          # Then extract and install
          tar -xzf amnezia-ui-package-[YOUR_ARCH].tar.gz
          cp -r addons/amneziaui /jffs/addons/
          chmod +x /jffs/addons/amneziaui/amnezia-ui
          ```
          
          ✨ **What's New in ${{ github.event.inputs.version || github.ref_name }}**
          
          • 🎯 **Multi-architecture support**: Separate packages for ARMv7, AArch64, and MIPS
          • 🔧 **Auto-detection**: Install script automatically detects router architecture
          • 🛠️ **Optimized binaries**: Each package contains only the necessary binary for its architecture
          • 📦 **Clean structure**: Consistent package layout across all architectures
          • 🧪 **Verified installation**: Tested install.sh works with architecture detection
          
          🎯 **Architecture Detection**
          
          The install script automatically detects your router's architecture using `uname -m`:
          - ARMv7: `armv7l`, `arm`
          - AArch64: `aarch64`, `arm64` 
          - MIPS: `mips`, `mipsel`
          
          🎯 **Features**
          
          • AmneziaWG 1.5 with full DPI circumvention
          • Web dashboard at http://router-ip:8080
          • Command-line interface for power users
          • Custom scripts support via /jffs/amneziaui_custom/
          • VPN Director compatibility
          • Merlin WireGuard coexistence
          • Advanced DPI bypass: All presets (I1-I5, S1-S4, H1-H4)
          • Universal compatibility: ARMv7, ARMv8/AArch64, MIPS
          
          📋 **Requirements**
          
          • ASUSWRT-Merlin 3004.388.x+
          • Custom scripts enabled
          • 10MB free space in /jffs
          • Entware (automatically installed if missing)
          
          🔧 **Quick Start**
          
          ```bash
          # Add configuration
          amnezia-ui add /path/to/config.conf
          
          # Start VPN interface
          amnezia-ui start amnezia0
          
          # Start web interface
          amnezia-ui web start
          
          # Check status
          amnezia-ui status
          ```
          
          📚 **Documentation**
          
          For detailed guides, see the [README](https://github.com/Sp0Xik/asuswrt-merlin-amnezia-ui#readme).
          
          ---
          **Build Date**: $(date -u "+%Y-%m-%d")
          **Architectures**: ARMv7, AArch64/ARM64, MIPS
          **Tested on**: RT-AX88U, RT-AX86U, RT-AC68U, TUF-AX5400
        draft: false
        prerelease: ${{ github.event.inputs.prerelease || false }}
        generate_release_notes: true
        target_commitish: ${{ github.sha }}
        files: |
          amnezia-ui-package-armv7.tar.gz
          amnezia-ui-package-armv7.tar.gz.sha256
          amnezia-ui-package-aarch64.tar.gz
          amnezia-ui-package-aarch64.tar.gz.sha256
          amnezia-ui-package-mips.tar.gz
          amnezia-ui-package-mips.tar.gz.sha256
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Update latest release info
      run: |
        echo "Release ${{ github.event.inputs.version || github.ref_name }} created successfully" >> $GITHUB_STEP_SUMMARY
        echo "Architecture-specific packages:" >> $GITHUB_STEP_SUMMARY
        echo "- [ARMv7 package](https://github.com/Sp0Xik/asuswrt-merlin-amnezia-ui/releases/latest/download/amnezia-ui-package-armv7.tar.gz)" >> $GITHUB_STEP_SUMMARY
        echo "- [AArch64 package](https://github.com/Sp0Xik/asuswrt-merlin-amnezia-ui/releases/latest/download/amnezia-ui-package-aarch64.tar.gz)" >> $GITHUB_STEP_SUMMARY
        echo "- [MIPS package](https://github.com/Sp0Xik/asuswrt-merlin-amnezia-ui/releases/latest/download/amnezia-ui-package-mips.tar.gz)" >> $GITHUB_STEP_SUMMARY
        echo "Auto-install command: \`curl -sSL https://raw.githubusercontent.com/Sp0Xik/asuswrt-merlin-amnezia-ui/main/install.sh | sh\`" >> $GITHUB_STEP_SUMMARY
