#!/bin/sh

# Amnezia-UI Script for ASUSWRT-Merlin
# Handles install/uninstall/start/stop + AJAX actions
# Compatible with Merlin WireGuard, VPN Director
# Selective routing via iptables (IP/domains)
# Full AmneziaWG support (no fallback to wg-quick)

VERSION="0.1.13"
CONFIG_DIR="/jffs/amnezia-ui/configs"
BINARY="/opt/bin/amneziawg-go"
CUSTOM_DIR="/jffs/amnezia-ui_custom"
UNINSTALL_LOG="/tmp/amnezia-ui-uninstall.log"
INSTALL_LOG="/tmp/amnezia-ui-install.log"

# CGI-like parsing for HTTP requests (from JS fetch)
if [ -n "$QUERY_STRING" ]; then
    ACTION=$(echo "$QUERY_STRING" | sed 's/.*action=\([^&]*\).*/\1/')
    IFACE=$(echo "$QUERY_STRING" | sed 's/.*iface=\([^&]*\).*/\1/')
elif [ -n "$CONTENT_LENGTH" ]; then
    read -r POST_DATA <&0
    ACTION=$(echo "$POST_DATA" | sed 's/.*action=\([^&]*\).*/\1/')
    IFACE=$(echo "$POST_DATA" | sed 's/.*iface=\([^&]*\).*/\1/')
    PRIVATE_KEY=$(echo "$POST_DATA" | sed 's/.*private-key=\([^&]*\).*/\1/')
    PUBLIC_KEY=$(echo "$POST_DATA" | sed 's/.*public-key=\([^&]*\).*/\1/')
    ENDPOINT=$(echo "$POST_DATA" | sed 's/.*endpoint=\([^&]*\).*/\1/')
    ALLOWED_IPS=$(echo "$POST_DATA" | sed 's/.*allowed-ips=\([^&]*\).*/\1/')
    PSK=$(echo "$POST_DATA" | sed 's/.*psk=\([^&]*\).*/\1/')
    OBFS=$(echo "$POST_DATA" | sed 's/.*obfs=on.*/1/' | grep -q 1 && echo "true" || echo "false")
    S1=$(echo "$POST_DATA" | sed 's/.*s1=\([^&]*\).*/\1/')
    S2=$(echo "$POST_DATA" | sed 's/.*s2=\([^&]*\).*/\1/')
    RULES=$(echo "$POST_DATA" | sed 's/.*rules=\([^&]*\).*/\1/')
fi

json_output() {
    echo "Content-Type: application/json"
    echo ""
    echo "$1"
    exit 0
}

text_output() {
    echo "Content-Type: text/plain"
    echo ""
    echo "$1"
    exit 0
}

# Check if binary exists, build amneziawg-go or error (no fallback)
check_binary() {
    if [ ! -x "$BINARY" ]; then
        opkg update >> "$INSTALL_LOG" 2>&1
        # Install only missing dependencies
        opkg list-installed | grep -q make || opkg install make >> "$INSTALL_LOG" 2>&1
        opkg list-installed | grep -q '^go ' || opkg install go >> "$INSTALL_LOG" 2>&1 || { echo "Cannot install go. Check Entware repository or try 'opkg install go' manually." | tee -a "$INSTALL_LOG"; exit 1; }
        opkg list-installed | grep -q ipset || opkg install ipset >> "$INSTALL_LOG" 2>&1
        opkg list-installed | grep -q git || opkg install git >> "$INSTALL_LOG" 2>&1
        echo "Checking /opt space:" | tee -a "$INSTALL_LOG"
        df -h /opt | tee -a "$INSTALL_LOG"
        df -h /opt | grep -q "Avail.*[5-9][0-9]*M" || { echo "Insufficient space in /opt. Free up ~50MB (df -h /opt) and try again." | tee -a "$INSTALL_LOG"; exit 1; }
        cd /tmp && git clone https://github.com/amnezia-vpn/amneziawg-go >> "$INSTALL_LOG" 2>&1 && cd amneziawg-go && make >> "$INSTALL_LOG" 2>&1
        cp amneziawg-go $BINARY && chmod +x $BINARY
        rm -rf /tmp/amneziawg-go
        if [ ! -x "$BINARY" ]; then
            echo "Failed to build amneziawg-go. Check $INSTALL_LOG, ensure make, go, ipset, git are installed via opkg, check /opt space (df -h /opt)." | tee -a "$INSTALL_LOG"
            exit 1
        fi
    fi
}

# Function to check if a package is used by other addons or Merlin
check_package_usage() {
    local pkg="$1"
    echo "Checking usage of $pkg..." >> "$UNINSTALL_LOG"
    # Check if package is a dependency for other installed packages
    if opkg depends "$pkg" | grep -qE "^[a-zA-Z0-9]"; then
        echo "$pkg is a dependency for other packages. Skipping removal." >> "$UNINSTALL_LOG"
        return 1
    fi
    # Check for Merlin VPN Director or other addons using ipset
    if [ "$pkg" = "ipset" ] && nvram get vpndirector_rulelist | grep -q .; then
        echo "ipset used by VPN Director (nvram vpndirector_rulelist). Skipping removal." >> "$UNINSTALL_LOG"
        return 1
    fi
    # Check for scripts/addons using go or git
    if [ "$pkg" = "go" ] || [ "$pkg" = "git" ]; then
        if find /jffs/scripts /jffs/addons -type f -exec grep -qE "go |git " {} \; 2>/dev/null; then
            echo "$pkg used by other scripts/addons in /jffs/scripts or /jffs/addons. Skipping removal." >> "$UNINSTALL_LOG"
            return 1
        fi
    fi
    # Safe to remove
    return 0
}

# Function to generate custom firewall script for selective routing (iptables + dnsmasq for domains)
generate_firewall_script() {
    if [ -n "$RULES" ]; then
        FIREWALL_SCRIPT="$CUSTOM_DIR/firewall_client"
        CLEANUP_SCRIPT="$CUSTOM_DIR/firewall_cleanup"
        DNSMASQ_CONF="$CUSTOM_DIR/dnsmasq_rules.conf"

        echo "#!/bin/sh" > "$FIREWALL_SCRIPT"
        echo "# Selective routing for AmneziaWG ($IFACE)" >> "$FIREWALL_SCRIPT"
        echo "iptables -t mangle -N AMNEZIA-MARK" >> "$FIREWALL_SCRIPT"
        echo "iptables -t mangle -A AMNEZIA-MARK -j MARK --set-mark 0x80000" >> "$FIREWALL_SCRIPT"
        for rule in $(echo "$RULES" | tr ',' ' '); do
            if [ -n "$rule" ]; then
                if echo "$rule" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+(/[0-9]+)?$'; then
                    echo "iptables -t mangle -A AMNEZIA-MARK -d $rule -j MARK --set-mark 0x80000" >> "$FIREWALL_SCRIPT"
                else
                    echo "address=/$rule/0.0.0.0" >> "$DNSMASQ_CONF"
                    echo "ipset=/$rule/amnezia_vpn" >> "$DNSMASQ_CONF"
                    echo "iptables -t mangle -A AMNEZIA-MARK -m set --match-set amnezia_vpn dst -j MARK --set-mark 0x80000" >> "$FIREWALL_SCRIPT"
                fi
            fi
        done
        echo "iptables -t mangle -A OUTPUT -j AMNEZIA-MARK" >> "$FIREWALL_SCRIPT"
        echo "iptables -t mangle -A PREROUTING -j AMNEZIA-MARK" >> "$FIREWALL_SCRIPT"
        echo "ip rule add fwmark 0x80000 table 100" >> "$FIREWALL_SCRIPT"
        echo "ip route add local 0.0.0.0/0 dev $IFACE table 100" >> "$FIREWALL_SCRIPT"
        echo "ipset list amnezia_vpn 2>/dev/null || ipset create amnezia_vpn hash:ip" >> "$FIREWALL_SCRIPT"
        echo "service restart_dnsmasq" >> "$FIREWALL_SCRIPT"
        chmod +x "$FIREWALL_SCRIPT"

        echo "#!/bin/sh" > "$CLEANUP_SCRIPT"
        echo "# Cleanup selective routing for AmneziaWG ($IFACE)" >> "$CLEANUP_SCRIPT"
        echo "ip route del local 0.0.0.0/0 dev $IFACE table 100" >> "$CLEANUP_SCRIPT"
        echo "ip rule del fwmark 0x80000 table 100" >> "$CLEANUP_SCRIPT"
        echo "iptables -t mangle -D OUTPUT -j AMNEZIA-MARK" >> "$CLEANUP_SCRIPT"
        echo "iptables -t mangle -D PREROUTING -j AMNEZIA-MARK" >> "$CLEANUP_SCRIPT"
        echo "iptables -t mangle -F AMNEZIA-MARK" >> "$CLEANUP_SCRIPT"
        echo "iptables -t mangle -X AMNEZIA-MARK" >> "$CLEANUP_SCRIPT"
        echo "ipset destroy amnezia_vpn 2>/dev/null" >> "$CLEANUP_SCRIPT"
        echo "rm -f $DNSMASQ_CONF" >> "$CLEANUP_SCRIPT"
        echo "service restart_dnsmasq" >> "$CLEANUP_SCRIPT"
        chmod +x "$CLEANUP_SCRIPT"
    fi
}

case "$1" in
    install)
        echo "Starting installation (v$VERSION)..." | tee -a "$INSTALL_LOG"
        if [ ! -d /jffs ] || ! touch /jffs/.amnezia-test 2>/dev/null; then
            echo "JFFS not enabled or not writable. Enable JFFS in Administration > System and reboot." | tee -a "$INSTALL_LOG"
            echo "Debug: ls /jffs/ = $(ls /jffs/ 2>/dev/null); df = $(df -h | grep jffs)" | tee -a "$INSTALL_LOG"
            exit 1
        fi
        rm -f /jffs/.amnezia-test

        if [ ! -d /opt ]; then
            echo "Entware not installed. Run 'amtm' in SSH and install Entware, then try again." | tee -a "$INSTALL_LOG"
            exit 1
        fi

        mkdir -p /jffs/addons/amnezia-ui
        mkdir -p /jffs/amnezia-ui_custom
        mkdir -p /jffs/scripts
        mkdir -p $CONFIG_DIR

        # Simplified install logic (like pre-0.1.9)
        echo "Checking for /jffs/addons/amnezia-ui/amnezia-ui..." | tee -a "$INSTALL_LOG"
        if [ ! -f /jffs/addons/amnezia-ui/amnezia-ui ]; then
            echo "Error: /jffs/addons/amnezia-ui/amnezia-ui not found. Check archive (tar -tzf /tmp/asuswrt-merlin-amnezia-ui.tar.gz)." | tee -a "$INSTALL_LOG"
            echo "Debug: ls -lR /jffs/addons/amnezia-ui/ = $(ls -lR /jffs/addons/amnezia-ui/ 2>/dev/null)" | tee -a "$INSTALL_LOG"
            exit 1
        fi
        echo "Moving /jffs/addons/amnezia-ui/amnezia-ui to /jffs/scripts/amnezia-ui..." | tee -a "$INSTALL_LOG"
        mv /jffs/addons/amnezia-ui/amnezia-ui /jffs/scripts/amnezia-ui 2>>"$INSTALL_LOG"
        if [ $? -ne 0 ] || [ ! -f /jffs/scripts/amnezia-ui ]; then
            echo "Error: Failed to move /jffs/addons/amnezia-ui/amnezia-ui to /jffs/scripts/amnezia-ui or file not found after move." | tee -a "$INSTALL_LOG"
            echo "Debug: ls -l /jffs/scripts/amnezia-ui = $(ls -l /jffs/scripts/amnezia-ui 2>/dev/null)" | tee -a "$INSTALL_LOG"
            exit 1
        fi
        chmod 0755 /jffs/scripts/amnezia-ui || { echo "Error: Failed to set executable permissions on /jffs/scripts/amnezia-ui" | tee -a "$INSTALL_LOG"; exit 1; }
        echo "Copying /jffs/addons/amnezia-ui/www to /www/user/amnezia-ui..." | tee -a "$INSTALL_LOG"
        cp -r /jffs/addons/amnezia-ui/www /www/user/amnezia-ui 2>>"$INSTALL_LOG"
        if [ $? -ne 0 ]; then
            echo "Error: Failed to copy /jffs/addons/amnezia-ui/www to /www/user/amnezia-ui" | tee -a "$INSTALL_LOG"
            exit 1
        fi
        echo "Copying /jffs/addons/amnezia-ui/configs to /jffs/amnezia-ui/..." | tee -a "$INSTALL_LOG"
        cp -r /jffs/addons/amnezia-ui/configs /jffs/amnezia-ui/ 2>>"$INSTALL_LOG"
        if [ $? -ne 0 ]; then
            echo "Error: Failed to copy /jffs/addons/amnezia-ui/configs to /jffs/amnezia-ui/" | tee -a "$INSTALL_LOG"
            exit 1
        fi
        echo "Removing temporary directory /jffs/addons/amnezia-ui..." | tee -a "$INSTALL_LOG"
        rm -rf /jffs/addons/amnezia-ui

        check_binary

        if ! grep -q "amnezia-ui" /var/spool/cron/crontabs/admin; then
            echo "Adding cron job for /jffs/scripts/amnezia-ui start..." | tee -a "$INSTALL_LOG"
            echo "*/2 * * * * /jffs/scripts/amnezia-ui start" >> /var/spool/cron/crontabs/admin
        fi

        if [ ! -f /jffs/scripts/services-start ]; then
            echo "Creating /jffs/scripts/services-start..." | tee -a "$INSTALL_LOG"
            touch /jffs/scripts/services-start
            chmod 0755 /jffs/scripts/services-start
        fi
        if ! grep -q "amnezia-ui" /jffs/scripts/services-start; then
            echo "Adding /jffs/scripts/amnezia-ui start to /jffs/scripts/services-start..." | tee -a "$INSTALL_LOG"
            echo "/jffs/scripts/amnezia-ui start" >> /jffs/scripts/services-start
        fi

        echo "Installation complete! Reboot router or run /jffs/scripts/amnezia-ui start" | tee -a "$INSTALL_LOG"
        ;;

    uninstall)
        echo "Starting uninstallation..." > "$UNINSTALL_LOG"
        /jffs/scripts/amnezia-ui stop
        rm -rf /www/user/amnezia-ui
        rm -rf /jffs/addons/amnezia-ui
        rm -rf /jffs/amnezia-ui
        rm -f /jffs/scripts/amnezia-ui
        rm -f /opt/bin/amneziawg-go
        sed -i '/amnezia-ui/d' /var/spool/cron/crontabs/admin
        sed -i '/amnezia-ui/d' /jffs/scripts/services-start

        # Remove dependencies if not used by other addons or Merlin
        for pkg in make go ipset git; do
            if opkg list-installed | grep -q "^$pkg "; then
                if check_package_usage "$pkg"; then
                    echo "Removing $pkg..." >> "$UNINSTALL_LOG"
                    opkg remove --autoremove "$pkg" >> "$UNINSTALL_LOG" 2>&1
                else
                    echo "Skipping removal of $pkg (used by other addons/Merlin)." >> "$UNINSTALL_LOG"
                fi
            else
                echo "$pkg not installed, skipping." >> "$UNINSTALL_LOG"
            fi
        done

        echo "Uninstallation complete! Check $UNINSTALL_LOG for details." | tee -a "$UNINSTALL_LOG"
        ;;

    start)
        check_binary
        if [ -f "$CONFIG_DIR/$IFACE.conf" ]; then
            $BINARY up $IFACE
            [ -x /jffs/amnezia-ui_custom/firewall_client ] && /jffs/amnezia-ui_custom/firewall_client
            service restart_httpd
            text_output "Started"
        else
            text_output "Config not found"
        fi
        ;;

    stop)
        check_binary
        $BINARY down $IFACE 2>/dev/null
        [ -x /jffs/amnezia-ui_custom/firewall_cleanup ] && /jffs/amnezia-ui_custom/firewall_cleanup
        service restart_httpd
        text_output "Stopped"
        ;;

    status)
        check_binary
        if $BINARY show $IFACE | grep -q "latest handshake"; then
            text_output "Connected"
        else
            text_output "Disconnected"
        fi
        ;;

    list)
        check_binary
        SERVERS='[]'
        for conf in $CONFIG_DIR/*.conf; do
            if [ -f "$conf" ]; then
                I=$(basename "$conf" .conf)
                S=$($BINARY show $I 2>/dev/null | grep endpoint || echo "Unknown")
                ST=$($BINARY show $I 2>/dev/null | grep -q "latest handshake" && echo "Connected" || echo "Disconnected")
                SERVERS=$(echo "$SERVERS" | jq --arg i "$I" --arg e "$S" --arg s "$ST" '. += [{"iface": $i, "endpoint": $e, "status": $s}]' 2>/dev/null || echo "[]")
            fi
        done
        json_output "$SERVERS"
        ;;

    add|generate)
        check_binary
        mkdir -p $CONFIG_DIR
        cat > "$CONFIG_DIR/$IFACE.conf" << EOF
[Interface]
PrivateKey = $PRIVATE_KEY
Address = 10.0.0.2/32
DNS = 8.8.8.8

[Peer]
PublicKey = $PUBLIC_KEY
Endpoint = $ENDPOINT
AllowedIPs = $ALLOWED_IPS
PersistentKeepalive = 25
${PSK:+PresharedKey = $PSK}
${S1:+S1 = $S1}
${S2:+S2 = $S2}
EOF
        if [ "$OBFS" = "true" ]; then
            echo "# Amnezia Obfuscation enabled (S1/S2 keys supported)" >> "$CONFIG_DIR/$IFACE.conf"
        fi
        generate_firewall_script
        text_output "Config added/generated for $IFACE"
        ;;

    delete)
        check_binary
        rm -f "$CONFIG_DIR/$IFACE.conf"
        $BINARY down $IFACE 2>/dev/null
        [ -x /jffs/amnezia-ui_custom/firewall_cleanup ] && /jffs/amnezia-ui_custom/firewall_cleanup
        text_output "Deleted"
        ;;

    *)
        if [ -n "$ACTION" ]; then
            $0 $ACTION
        else
            echo "Usage: $0 {install|uninstall|start|stop|status|list|add|generate|delete}"
        fi
        exit 1
        ;;
esac
