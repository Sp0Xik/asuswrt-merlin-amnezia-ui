#!/bin/sh

# Amnezia-UI Script for ASUSWRT-Merlin
# Handles install/uninstall/start/stop + AJAX actions
# Compatible with Merlin WireGuard, VPN Director
# Selective routing via iptables (IP/domains)
# Full AmneziaWG support (v0.2.15 with H1-H4, S3, S4)

VERSION="0.2.0"
CONFIG_DIR="/jffs/amnezia-ui/configs"
BINARY="/opt/bin/amneziawg-go"
CUSTOM_DIR="/jffs/amnezia-ui_custom"
UNINSTALL_LOG="/tmp/amnezia-ui-uninstall.log"
INSTALL_LOG="/tmp/amnezia-ui-install.log"

# CGI-like parsing for HTTP requests (from JS fetch)
if [ -n "$QUERY_STRING" ]; then
    ACTION=$(echo "$QUERY_STRING" | sed 's/.*action=\([^&]*\).*/\1/')
    IFACE=$(echo "$QUERY_STRING" | sed 's/.*iface=\([^&]*\).*/\1/')
elif [ -n "$CONTENT_LENGTH" ]; then
    read -r POST_DATA <&0
    ACTION=$(echo "$POST_DATA" | sed 's/.*action=\([^&]*\).*/\1/')
    IFACE=$(echo "$POST_DATA" | sed 's/.*iface=\([^&]*\).*/\1/')
    PRIVATE_KEY=$(echo "$POST_DATA" | sed 's/.*private-key=\([^&]*\).*/\1/')
    PUBLIC_KEY=$(echo "$POST_DATA" | sed 's/.*public-key=\([^&]*\).*/\1/')
    ENDPOINT=$(echo "$POST_DATA" | sed 's/.*endpoint=\([^&]*\).*/\1/')
    ALLOWED_IPS=$(echo "$POST_DATA" | sed 's/.*allowed-ips=\([^&]*\).*/\1/')
    PSK=$(echo "$POST_DATA" | sed 's/.*psk=\([^&]*\).*/\1/')
    OBFS=$(echo "$POST_DATA" | sed 's/.*obfs=on.*/1/' | grep -q 1 && echo "true" || echo "false")
    S1=$(echo "$POST_DATA" | sed 's/.*s1=\([^&]*\).*/\1/')
    S2=$(echo "$POST_DATA" | sed 's/.*s2=\([^&]*\).*/\1/')
    S3=$(echo "$POST_DATA" | sed 's/.*s3=\([^&]*\).*/\1/')
    S4=$(echo "$POST_DATA" | sed 's/.*s4=\([^&]*\).*/\1/')
    H1_H4=$(echo "$POST_DATA" | sed 's/.*h1-h4=\([1-4]*\).*/\1/')  # Range 1-4 for H1-H4
    RULES=$(echo "$POST_DATA" | sed 's/.*rules=\([^&]*\).*/\1/')
fi

json_output() {
    echo "Content-Type: application/json"
    echo ""
    echo "$1"
    exit 0
}

text_output() {
    echo "Content-Type: text/plain"
    echo ""
    echo "$1"
    exit 0
}

# Check if binary exists, compile amneziawg-go v0.2.15 or error
check_binary() {
    if [ ! -x "$BINARY" ]; then
        if [ -f /opt/tmp/opkg.lock ]; then
            echo "Removing stale opkg lock file..." | tee -a "$INSTALL_LOG"
            rm -f /opt/tmp/opkg.lock 2>>"$INSTALL_LOG"
        fi
        opkg update >> "$INSTALL_LOG" 2>&1 || { echo "Failed to update opkg. Check Entware repository." | tee -a "$INSTALL_LOG"; exit 1; }
        # Install build dependencies
        for pkg in make go git git-http; do
            opkg list-installed | grep -q "^$pkg " || { echo "Installing $pkg for compilation..." | tee -a "$INSTALL_LOG"; opkg install "$pkg" >> "$INSTALL_LOG" 2>&1 || { echo "Cannot install $pkg. Check Entware repository or try 'opkg install $pkg' manually." | tee -a "$INSTALL_LOG"; exit 1; }; }
        done
        # Install runtime dependencies
        for pkg in ipset jq; do
            opkg list-installed | grep -q "^$pkg " || { echo "Installing $pkg for runtime..." | tee -a "$INSTALL_LOG"; opkg install "$pkg" >> "$INSTALL_LOG" 2>&1 || { echo "Cannot install $pkg. Check Entware repository or try 'opkg install $pkg' manually." | tee -a "$INSTALL_LOG"; exit 1; }; }
        done
        echo "Checking /opt space:" | tee -a "$INSTALL_LOG"
        df -k /opt | tee -a "$INSTALL_LOG"
        FREE_SPACE_KB=$(df -k /opt | awk 'NR==2 {print $4}')
        if [ -z "$FREE_SPACE_KB" ] || [ "$FREE_SPACE_KB" -lt 52480 ]; then
            echo "Insufficient space in /opt. Free up ~50MB (available: ${FREE_SPACE_KB:-0}KB). Run 'df -h /opt' and free up space." | tee -a "$INSTALL_LOG"
            exit 1
        fi
        echo "Available space: $FREE_SPACE_KB KB" | tee -a "$INSTALL_LOG"
        cd /tmp || { echo "Failed to change to /tmp directory." | tee -a "$INSTALL_LOG"; exit 1; }
        for attempt in 1 2 3; do
            git clone --branch v0.2.15 https://github.com/amnezia-vpn/amneziawg-go >> "$INSTALL_LOG" 2>&1
            if [ $? -eq 0 ]; then
                break
            fi
            echo "Git clone failed, attempt $attempt/3. Retrying in 5 seconds..." | tee -a "$INSTALL_LOG"
            sleep 5
        done
        if [ ! -d /tmp/amneziawg-go ]; then
            echo "Failed to clone amneziawg-go v0.2.15 after 3 attempts. Check network or GitHub availability." | tee -a "$INSTALL_LOG"
            exit 1
        fi
        cd amneziawg-go || { echo "Failed to change to amneziawg-go directory." | tee -a "$INSTALL_LOG"; exit 1; }
        make >> "$INSTALL_LOG" 2>&1
        if [ $? -ne 0 ]; then
            echo "Failed to build amneziawg-go v0.2.15. Check $INSTALL_LOG for make errors." | tee -a "$INSTALL_LOG"
            exit 1
        fi
        if [ ! -f amneziawg-go ]; then
            echo "Build succeeded but amneziawg-go binary not found. Check repository or build process." | tee -a "$INSTALL_LOG"
            exit 1
        fi
        cp amneziawg-go $BINARY && chmod +x $BINARY
        if [ $? -ne 0 ]; then
            echo "Failed to copy amneziawg-go to $BINARY. Check permissions or disk space." | tee -a "$INSTALL_LOG"
            exit 1
        fi
        rm -rf /tmp/amneziawg-go
        if [ ! -x "$BINARY" ]; then
            echo "Failed to build amneziawg-go v0.2.15. Check $INSTALL_LOG, ensure make, go, git are installed via opkg, check /opt space (df -h /opt)." | tee -a "$INSTALL_LOG"
            exit 1
        fi
        # Remove build dependencies if not used by other addons
        for pkg in make go git git-http; do
            if opkg list-installed | grep -q "^$pkg "; then
                if check_package_usage "$pkg"; then
                    echo "Removing $pkg (used only for compilation)..." | tee -a "$INSTALL_LOG"
                    opkg remove --autoremove "$pkg" >> "$INSTALL_LOG" 2>&1
                else
                    echo "Keeping $pkg (used by other addons/Merlin)." | tee -a "$INSTALL_LOG"
                fi
            fi
        done
    fi
}

# Function to check if a package is used by other addons or Merlin
check_package_usage() {
    local pkg="$1"
    echo "Checking usage of $pkg..." >> "$UNINSTALL_LOG"
    # Check if package is a dependency for other installed packages
    if opkg depends "$pkg" | grep -qE "^[a-zA-Z0-9]"; then
        echo "$pkg is a dependency for other packages. Skipping removal." >> "$UNINSTALL_LOG"
        return 1
    fi
    # Check for Merlin VPN Director or other addons using ipset
    if [ "$pkg" = "ipset" ] && nvram get vpndirector_rulelist | grep -q .; then
        echo "ipset used by VPN Director (nvram vpndirector_rulelist). Skipping removal." >> "$UNINSTALL_LOG"
        return 1
    fi
    # Check for scripts/addons using make, go, git, git-http, or jq
    if [ "$pkg" = "make" ] || [ "$pkg" = "go" ] || [ "$pkg" = "git" ] || [ "$pkg" = "git-http" ] || [ "$pkg" = "jq" ]; then
        if find /jffs/scripts /jffs/addons -type f -exec grep -qE "$pkg " {} \; 2>/dev/null; then
            echo "$pkg used by other scripts/addons in /jffs/scripts or /jffs/addons. Skipping removal." >> "$UNINSTALL_LOG"
            return 1
        fi
    fi
    # Safe to remove
    return 0
}

# Function to generate custom firewall script for selective routing (iptables + dnsmasq for domains)
generate_firewall_script() {
    if [ -n "$RULES" ]; then
        FIREWALL_SCRIPT="$CUSTOM_DIR/firewall_client"
        CLEANUP_SCRIPT="$CUSTOM_DIR/firewall_cleanup"
        DNSMASQ_CONF="$CUSTOM_DIR/dnsmasq_rules.conf"

        echo "#!/bin/sh" > "$FIREWALL_SCRIPT"
        echo "# Selective routing for AmneziaWG ($IFACE)" >> "$FIREWALL_SCRIPT"
        echo "iptables -t mangle -N AMNEZIA-MARK" >> "$FIREWALL_SCRIPT"
        echo "iptables -t mangle -A AM
