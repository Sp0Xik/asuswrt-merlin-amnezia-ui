#!/bin/sh

# Amnezia-UI Script for ASUSWRT-Merlin (adapted from XRAYUI)
# Handles install/uninstall/start/stop + AJAX actions

VERSION="0.1.0"
CONFIG_DIR="/jffs/amnezia-ui/configs"
BINARY="/opt/bin/amneziawg-go"

# CGI-like parsing for HTTP requests (from JS fetch)
if [ -n "$QUERY_STRING" ]; then
    # GET params: action=xxx&iface=yyy
    ACTION=$(echo "$QUERY_STRING" | sed 's/.*action=\([^&]*\).*/\1/')
    IFACE=$(echo "$QUERY_STRING" | sed 's/.*iface=\([^&]*\).*/\1/')
elif [ -n "$CONTENT_LENGTH" ]; then
    # POST form data
    read -r POST_DATA <&0
    ACTION=$(echo "$POST_DATA" | sed 's/.*action=\([^&]*\).*/\1/')
    IFACE=$(echo "$POST_DATA" | sed 's/.*iface=\([^&]*\).*/\1/')
    PRIVATE_KEY=$(echo "$POST_DATA" | sed 's/.*private-key=\([^&]*\).*/\1/')
    PUBLIC_KEY=$(echo "$POST_DATA" | sed 's/.*public-key=\([^&]*\).*/\1/')
    ENDPOINT=$(echo "$POST_DATA" | sed 's/.*endpoint=\([^&]*\).*/\1/')
    ALLOWED_IPS=$(echo "$POST_DATA" | sed 's/.*allowed-ips=\([^&]*\).*/\1/')
    PSK=$(echo "$POST_DATA" | sed 's/.*psk=\([^&]*\).*/\1/')
    OBFS=$(echo "$POST_DATA" | sed 's/.*obfs=on.*/1/' | grep -q 1 && echo "true" || echo "false")
fi

# Function to output JSON
json_output() {
    echo "Content-Type: application/json"
    echo ""
    echo "$1"
    exit 0
}

# Function to output text
text_output() {
    echo "Content-Type: text/plain"
    echo ""
    echo "$1"
    exit 0
}

# Check if binary exists, fallback to wg
check_binary() {
    if [ ! -x "$BINARY" ]; then
        # Install if missing (build from source; assume Entware has git/make/go — if not, manual later)
        if [ ! -d /tmp/amneziawg-go ]; then
            cd /tmp && git clone https://github.com/amnezia-vpn/amneziawg-go && cd amneziawg-go && make
            cp amneziawg-go $BINARY && chmod +x $BINARY
        fi
        # Fallback: use wg if build fails
        if [ ! -x "$BINARY" ]; then
            BINARY="/usr/sbin/wg-quick"  # Standard WG, obfs via custom PostUp
            echo "Warning: Using standard WG (no built-in obfs; add manual)"
        fi
    fi
}

case "$1" in
    install)
        # Check prerequisites
        if [ ! -f /jffs/.ash ]; then
            echo "JFFS not enabled. Enable JFFS in Administration > System."
            exit 1
        fi

        if [ ! -d /opt ]; then
            echo "Entware not installed. Install from https://github.com/Entware/Entware/wiki/Install-on-ASUSWRT-Merlin."
            exit 1
        fi

        # Create directories
        mkdir -p /jffs/addons/amnezia-ui
        mkdir -p /jffs/amnezia-ui_custom
        mkdir -p /jffs/scripts
        mkdir -p $CONFIG_DIR

        # Copy files from extracted dir (after tar to /jffs/addons/amnezia-ui)
        cp -r /jffs/addons/amnezia-ui/www /www/amnezia-ui
        cp -r /jffs/addons/amnezia-ui/configs /jffs/amnezia-ui/  # Optional, for examples
        # Cleanup after copy
        rm -rf /jffs/addons/amnezia-ui

        # This script itself (already mv'ed in install command)
        chmod 0755 /jffs/scripts/amnezia-ui

        # Download/Install AmneziaWG (adapt from Amnezia repo; for now, use WireGuard + obfs)
        opkg update
        opkg install wireguard-tools  # Base WireGuard
        # For obfs: wget Amnezia obfs binary if available; TODO: compile Go obfs for ARM
        check_binary

        # Setup cron for auto-start (coexist with XRAYUI or others)
        if [ -f /jffs/scripts/xrayui ]; then
            echo "Coexisting with XRAYUI detected — adding Amnezia-UI cron entry"
        fi
        if ! grep -q "amnezia-ui" /var/spool/cron/crontabs/admin; then
            echo "*/2 * * * * /jffs/scripts/amnezia-ui start" >> /var/spool/cron/crontabs/admin
        fi

        # Add to services-start if not present (coexist with XRAYUI or others)
        if [ -f /jffs/scripts/xrayui ]; then
            echo "Coexisting with XRAYUI detected — adding Amnezia-UI services entry"
        fi
        if ! grep -q "amnezia-ui" /jffs/scripts/services-start; then
            echo "/jffs/scripts/amnezia-ui start" >> /jffs/scripts/services-start
        fi

        echo "Installation complete! Reboot router or run /jffs/scripts/amnezia-ui start"
        ;;

    uninstall)
        # Stop service
        /jffs/scripts/amnezia-ui stop

        # Remove files
        rm -rf /www/amnezia-ui
        rm -rf /jffs/addons/amnezia-ui
        rm -rf /jffs/amnezia-ui
        rm -f /jffs/scripts/amnezia-ui

        # Remove from cron and services
        sed -i '/amnezia-ui/d' /var/spool/cron/crontabs/admin
        sed -i '/amnezia-ui/d' /jffs/scripts/services-start

        echo "Uninstallation complete!"
        ;;

    start)
        check_binary
        if [ -f "$CONFIG_DIR/$IFACE.conf" ]; then
            $BINARY up $IFACE
            # Apply custom firewall (separate from XRAYUI customs — use /jffs/amnezia-ui_custom/)
            [ -x /jffs/amnezia-ui_custom/firewall_client ] && /jffs/amnezia-ui_custom/firewall_client
            service restart_httpd
            text_output "Started"
        else
            text_output "Config not found"
        fi
        ;;

    stop)
        check_binary
        $BINARY down $IFACE 2>/dev/null
        # Apply custom firewall cleanup (separate from XRAYUI customs — use /jffs/amnezia-ui_custom/)
        [ -x /jffs/amnezia-ui_custom/firewall_cleanup ] && /jffs/amnezia-ui_custom/firewall_cleanup
        service restart_httpd
        text_output "Stopped"
        ;;

    # AJAX actions
    status)
        check_binary
        if $BINARY show $IFACE >/dev/null 2>&1; then
            text_output "Connected"
        else
            text_output "Disconnected"
        fi
        ;;

    list)
        check_binary
        SERVERS='[]'
        for conf in $CONFIG_DIR/*.conf; do
            if [ -f "$conf" ]; then
                I=$(basename "$conf" .conf)
                S=$($BINARY show $I 2>/dev/null | grep endpoint || echo "Unknown")
                ST="Connected"  # Or parse
                SERVERS=$(echo "$SERVERS" | jq --arg i "$I" --arg e "$S" --arg s "$ST" '. += [{"iface": $i, "endpoint": $e, "status": $s}]' 2>/dev/null || echo "[]")
            fi
        done
        json_output "$SERVERS"
        ;;

    add|generate)
        check_binary
        mkdir -p $CONFIG_DIR
        cat > "$CONFIG_DIR/$IFACE.conf" << EOF
[Interface]
PrivateKey = $PRIVATE_KEY
Address = 10.0.0.2/32  # Example; customize
DNS = 8.8.8.8

[Peer]
PublicKey = $PUBLIC_KEY
Endpoint = $ENDPOINT
AllowedIPs = $ALLOWED_IPS
PersistentKeepalive = 25
${PSK:+PresharedKey = $PSK}
EOF
        if [ "$OBFS" = "true" ]; then
            # Add Amnezia obfs (example PostUp for scrambling; from docs)
            echo "PostUp = iptables -t mangle -A OUTPUT -p udp --dport 51820 -j TCPMSS --clamp-mss-to-pmtu" >> "$CONFIG_DIR/$IFACE.conf"
            echo "# Amnezia Obfuscation enabled (S1/S2 keys in UI later)" >> "$CONFIG_DIR/$IFACE.conf"
        fi
        text_output "Config added/generated for $IFACE"
        ;;

    delete)
        rm -f "$CONFIG_DIR/$IFACE.conf"
        $BINARY down $IFACE 2>/dev/null
        text_output "Deleted"
        ;;

    *)
        if [ -n "$ACTION" ]; then
            # Dispatch to case above
            $0 $ACTION
        else
            echo "Usage: $0 {install|uninstall|start|stop|status|list|add|generate|delete}"
        fi
        exit 1
        ;;
esac
